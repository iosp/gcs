<ResourceDictionary
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" 
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:d="http://schemas.microsoft.com/expression/blend/2008" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
    xmlns:Microsoft_Windows_Themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Luna"
	mc:Ignorable="d">

    <LinearGradientBrush x:Key="NormalBorderBrush" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#CCC" Offset="0.0"/>
        <GradientStop Color="#444" Offset="1.0"/>
    </LinearGradientBrush>

    <Color x:Key="UMTinactiveGrey">#FF8D8D8D</Color>

    <Style x:Key="SimpleScrollRepeatButtonStyle" d:IsControlPart="True" TargetType="{x:Type RepeatButton}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Grid>
                        <Rectangle Fill="{TemplateBinding Background}" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="{TemplateBinding BorderThickness}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="SimpleSliderThumb" d:IsControlPart="True" TargetType="{x:Type Thumb}">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="Height" Value="14"/>
        <Setter Property="Width" Value="14"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Grid Width="Auto" ClipToBounds="False" SnapsToDevicePixels="False" HorizontalAlignment="Left">
                        <Rectangle Margin="3.917,0,4.208,0" Fill="#FFFFFFFF" Stroke="{x:Null}" StrokeThickness="1" Height="15" Width="6" x:Name="rectangle" RadiusX="3" RadiusY="3"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True"/>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Fill" TargetName="rectangle">
                                <Setter.Value>
                                    <SolidColorBrush Color="{DynamicResource UMTinactiveGrey}"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type Slider}" x:Key="SpringZoom">
        <Setter Property="Background">
            <Setter.Value>

                <!-- LightBrush is used for content areas such as Menu, Tab Control background -->
                <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                    <GradientStop Color="#FFF" Offset="0.0"/>
                    <GradientStop Color="#EEE" Offset="1.0"/>
                </LinearGradientBrush>

            </Setter.Value>
        </Setter>
        <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Slider}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="thumbToCenter"/>
                    </ControlTemplate.Resources>
                    <Grid x:Name="GridRoot" HorizontalAlignment="Stretch" Margin="-20,0,-20,0" VerticalAlignment="Top" Height="Auto">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto" MinHeight="{TemplateBinding MinHeight}"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>

                        <!-- TickBar shows the ticks for Slider -->
                        <TickBar Visibility="Collapsed" x:Name="TopTick" Height="0" SnapsToDevicePixels="True" Placement="Top" Fill="#444" TickFrequency="1"/>
                        <Border Grid.Row="1" Margin="24,0" x:Name="Border" Height="1" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="1" Background="#FFFFFFFF"/>

                        <Grid d:LayoutOverrides="VerticalAlignment, GridBox" HorizontalAlignment="Left" Margin="0,4,0,4" x:Name="Licon" Width="20" Height="15" Grid.Row="1" Background="Transparent">
                            <Ellipse Stroke="White" HorizontalAlignment="Right" Width="6" Height="6" Margin="0,4.5,3,4.5" Fill="{x:Null}" d:LayoutOverrides="Width"/>
                        </Grid>
                        <Grid d:LayoutOverrides="GridBox" HorizontalAlignment="Right" Margin="0,4,0,4" x:Name="Ricon" VerticalAlignment="Center" Width="20" Height="13.25" Grid.Row="1" Background="Transparent">
                            <Ellipse Stroke="White" HorizontalAlignment="Left" Width="13.125" Height="Auto" Margin="0,0,0,0.125" Fill="{x:Null}"/>
                        </Grid>

                        <!-- The Track lays out the repeat buttons and thumb -->
                        <Track Grid.Row="1" x:Name="PART_Track" Margin="20,0,20,0">
                            <Track.Thumb>
                                <Thumb Style="{DynamicResource SimpleSliderThumb}" x:Name="thumb" Height="Auto" Width="Auto"/>
                            </Track.Thumb>
                            <Track.IncreaseRepeatButton>
                                <RepeatButton Style="{DynamicResource SimpleScrollRepeatButtonStyle}" Command="Slider.IncreaseLarge" BorderThickness="0,0,0,0" Margin="0,0,-20,0"/>
                            </Track.IncreaseRepeatButton>
                            <Track.DecreaseRepeatButton>
                                <RepeatButton Style="{DynamicResource SimpleScrollRepeatButtonStyle}" Command="Slider.DecreaseLarge" BorderThickness="0,0,0,0" Margin="-20,0,0,0"/>
                            </Track.DecreaseRepeatButton>
                        </Track>

                        <TickBar Visibility="Collapsed" Grid.Row="2" x:Name="BottomTick" Height="0" SnapsToDevicePixels="True" Placement="Bottom" Fill="{TemplateBinding Foreground}" SelectionEnd="-1" SelectionStart="-1" TickFrequency="1"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True" SourceName="Ricon">
                            <Setter Property="Background" TargetName="Ricon" Value="#33FFFFFF"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True" SourceName="Licon">
                            <Setter Property="Background" TargetName="Licon" Value="#33FFFFFF"/>
                        </Trigger>
                        <Trigger Property="TickPlacement" Value="TopLeft">
                            <Setter Property="Visibility" Value="Visible" TargetName="TopTick"/>
                            <Setter Property="Margin" TargetName="Border" Value="25,0,25,0"/>
                        </Trigger>
                        <Trigger Property="TickPlacement" Value="BottomRight">
                            <Setter Property="Visibility" Value="Visible" TargetName="BottomTick"/>
                        </Trigger>
                        <Trigger Property="TickPlacement" Value="Both">
                            <Setter Property="Visibility" Value="Visible" TargetName="TopTick"/>
                            <Setter Property="Visibility" Value="Visible" TargetName="BottomTick"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="Border">
                                <Setter.Value>
                                    <SolidColorBrush Color="{DynamicResource UMTinactiveGrey}"/>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Background" TargetName="thumb">
                                <Setter.Value>
                                    <SolidColorBrush Color="{DynamicResource UMTinactiveGrey}"/>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Foreground" TargetName="thumb" Value="{x:Null}"/>
                        </Trigger>

                        <!-- Use a rotation to create a Vertical Slider form the default Horizontal -->
                        <Trigger Property="Orientation" Value="Vertical">
                            <Setter Property="LayoutTransform" TargetName="GridRoot">
                                <Setter.Value>
                                    <RotateTransform Angle="-90"/>
                                </Setter.Value>
                            </Setter>
                            <!-- Track rotates itself based on orientation so need to force it back -->
                            <Setter TargetName="PART_Track" Property="Orientation" Value="Horizontal"/>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="MapBrightnessSlider" TargetType="{x:Type Slider}">
        <Setter Property="Background">
            <Setter.Value>

                <!-- LightBrush is used for content areas such as Menu, Tab Control background -->
                <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                    <GradientStop Color="#FFF" Offset="0.0"/>
                    <GradientStop Color="#EEE" Offset="1.0"/>
                </LinearGradientBrush>

            </Setter.Value>
        </Setter>
        <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Slider}">
                    <Grid x:Name="GridRoot" HorizontalAlignment="Stretch" Margin="-20,0,-20,0" VerticalAlignment="Top" Height="Auto">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto" MinHeight="{TemplateBinding MinHeight}"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>

                        <!-- TickBar shows the ticks for Slider -->
                        <TickBar Visibility="Collapsed" x:Name="TopTick" Height="0" SnapsToDevicePixels="True" Placement="Top" Fill="#444" TickFrequency="1"/>
                        <Border Grid.Row="1" Margin="20,0,27,0" x:Name="Border" Height="1" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="1" Background="#FFFFFFFF"/>

                        <Grid d:LayoutOverrides="VerticalAlignment, GridBox" HorizontalAlignment="Right" Margin="0,4,3,4" x:Name="Licon" Width="20" Height="15" Grid.Row="1">
                            <Grid.Background>
                                <SolidColorBrush/>
                            </Grid.Background>
                            <Ellipse Fill="{x:Null}" Stroke="#FFFFFFFF" HorizontalAlignment="Left" VerticalAlignment="Stretch" Margin="3.991,5.5,0,5.5" Width="4" Height="4"/>
                            <Path Margin="5.492,1.684,0,0" VerticalAlignment="Top" Height="3.453" Fill="{x:Null}" Stretch="Fill" Stroke="#FFFFFFFF" Data="M10.03125,2.0316339 L10.031499,-0.42063169" HorizontalAlignment="Left" Width="1"/>
                            <Path Margin="5.492,0,0,1.667" VerticalAlignment="Bottom" Height="3.453" Fill="{x:Null}" Stretch="Fill" Stroke="#FFFFFFFF" Data="M10.03125,2.0316339 L10.031499,-0.42063169" HorizontalAlignment="Left" Width="1"/>
                            <Path HorizontalAlignment="Stretch" Margin="8.424,7,8.154,7" Width="Auto" Fill="{x:Null}" Stretch="Fill" Stroke="#FFFFFFFF" Data="M15.25,7.4375 L17.671867,7.4369969"/>
                            <Path HorizontalAlignment="Left" Margin="0.169,7,0,7" Fill="{x:Null}" Stretch="Fill" Stroke="#FFFFFFFF" Data="M15.25,7.4375 L17.671867,7.4369969" Width="3.422"/>
                            <Path HorizontalAlignment="Left" Margin="1.316,4.042,0,0" Fill="{x:Null}" Stretch="Fill" Stroke="#FFFFFFFF" Data="M15.25,7.4375 L17.671867,7.4369969" Width="3.422" RenderTransformOrigin="0.5,0.5" VerticalAlignment="Top" Height="1">
                                <Path.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform ScaleX="1" ScaleY="1"/>
                                        <SkewTransform AngleX="0" AngleY="0"/>
                                        <RotateTransform Angle="44.983"/>
                                        <TranslateTransform X="0" Y="0"/>
                                    </TransformGroup>
                                </Path.RenderTransform>
                            </Path>
                            <Path HorizontalAlignment="Stretch" Margin="7.254,4.125,9.324,0" Fill="{x:Null}" Stretch="Fill" Stroke="#FFFFFFFF" Data="M15.25,7.4375 L17.671867,7.4369969" RenderTransformOrigin="0.5,0.5" VerticalAlignment="Top" Height="1" Width="Auto">
                                <Path.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform ScaleX="-1" ScaleY="1"/>
                                        <SkewTransform AngleX="0" AngleY="0"/>
                                        <RotateTransform Angle="-44.983"/>
                                        <TranslateTransform X="0" Y="0"/>
                                    </TransformGroup>
                                </Path.RenderTransform>
                            </Path>
                            <Path HorizontalAlignment="Left" Margin="1.191,0,0,4.104" Fill="{x:Null}" Stretch="Fill" Stroke="#FFFFFFFF" Data="M15.25,7.4375 L17.671867,7.4369969" Width="3.422" RenderTransformOrigin="0.5,0.5" VerticalAlignment="Bottom" Height="1">
                                <Path.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform ScaleX="1" ScaleY="-1"/>
                                        <SkewTransform AngleX="0" AngleY="0"/>
                                        <RotateTransform Angle="-44.983"/>
                                        <TranslateTransform X="0" Y="0"/>
                                    </TransformGroup>
                                </Path.RenderTransform>
                            </Path>
                            <Path HorizontalAlignment="Stretch" Margin="7.212,0,9.366,4.187" Fill="{x:Null}" Stretch="Fill" Stroke="#FFFFFFFF" Data="M15.25,7.4375 L17.671867,7.4369969" RenderTransformOrigin="0.5,0.5" VerticalAlignment="Bottom" Width="Auto" Height="1">
                                <Path.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform ScaleX="1" ScaleY="1"/>
                                        <SkewTransform AngleX="0" AngleY="0"/>
                                        <RotateTransform Angle="-135.017"/>
                                        <TranslateTransform X="0" Y="0"/>
                                    </TransformGroup>
                                </Path.RenderTransform>
                            </Path>
                        </Grid>
                        <Grid d:LayoutOverrides="GridBox" HorizontalAlignment="Left" Margin="-0.5,0,0,0" x:Name="Ricon" VerticalAlignment="Center" Width="20" Height="15" Grid.Row="1" Background="Transparent">
                            <Ellipse Stroke="#FFFFFFFF" HorizontalAlignment="Center" VerticalAlignment="Center" Width="7.5" Height="7.5"/>
                            <Path Margin="9.5,-0.5,9.5,0" VerticalAlignment="Top" Height="3.453" Fill="{x:Null}" Stretch="Fill" Stroke="#FFFFFFFF" Data="M10.03125,2.0316339 L10.031499,-0.42063169"/>
                            <Path Margin="9.5,0,9.5,-0.5" VerticalAlignment="Bottom" Height="3.453" Fill="{x:Null}" Stretch="Fill" Stroke="#FFFFFFFF" Data="M10.03125,2.0316339 L10.031499,-0.42063169"/>
                            <Path HorizontalAlignment="Right" Margin="0,7,1.729,7" Width="3.422" Fill="{x:Null}" Stretch="Fill" Stroke="#FFFFFFFF" Data="M15.25,7.4375 L17.671867,7.4369969"/>
                            <Path HorizontalAlignment="Left" Margin="1.802,7,0,7" Width="3.422" Fill="{x:Null}" Stretch="Fill" Stroke="#FFFFFFFF" Data="M15.25,7.4375 L17.671867,7.4369969"/>
                            <Path HorizontalAlignment="Left" Margin="3.782,2.417,0,0" Fill="{x:Null}" Stretch="Fill" Stroke="#FFFFFFFF" Data="M15.25,7.4375 L17.671867,7.4369969" Width="3.422" RenderTransformOrigin="0.5,0.5" Height="1" VerticalAlignment="Top">
                                <Path.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform ScaleX="1" ScaleY="1"/>
                                        <SkewTransform AngleX="0" AngleY="0"/>
                                        <RotateTransform Angle="44.983"/>
                                        <TranslateTransform X="0" Y="0"/>
                                    </TransformGroup>
                                </Path.RenderTransform>
                            </Path>
                            <Path HorizontalAlignment="Right" Margin="0,2.417,3.858,0" Fill="{x:Null}" Stretch="Fill" Stroke="#FFFFFFFF" Data="M15.25,7.4375 L17.671867,7.4369969" Width="3.422" RenderTransformOrigin="0.5,0.5" VerticalAlignment="Top" Height="1">
                                <Path.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform ScaleX="-1" ScaleY="1"/>
                                        <SkewTransform AngleX="0" AngleY="0"/>
                                        <RotateTransform Angle="-44.983"/>
                                        <TranslateTransform X="0" Y="0"/>
                                    </TransformGroup>
                                </Path.RenderTransform>
                            </Path>
                            <Path HorizontalAlignment="Left" Margin="3.782,0,0,2.479" Fill="{x:Null}" Stretch="Fill" Stroke="#FFFFFFFF" Data="M15.25,7.4375 L17.671867,7.4369969" Width="3.422" RenderTransformOrigin="0.5,0.5" VerticalAlignment="Bottom" Height="1">
                                <Path.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform ScaleX="1" ScaleY="-1"/>
                                        <SkewTransform AngleX="0" AngleY="0"/>
                                        <RotateTransform Angle="-44.983"/>
                                        <TranslateTransform X="0" Y="0"/>
                                    </TransformGroup>
                                </Path.RenderTransform>
                            </Path>
                            <Path HorizontalAlignment="Right" Margin="0,0,3.858,2.479" Fill="{x:Null}" Stretch="Fill" Stroke="#FFFFFFFF" Data="M15.25,7.4375 L17.671867,7.4369969" RenderTransformOrigin="0.5,0.5" VerticalAlignment="Bottom" Height="1" Width="3.422">
                                <Path.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform ScaleX="-1" ScaleY="-1"/>
                                        <SkewTransform AngleX="0" AngleY="0"/>
                                        <RotateTransform Angle="44.983"/>
                                        <TranslateTransform X="0" Y="0"/>
                                    </TransformGroup>
                                </Path.RenderTransform>
                            </Path>
                        </Grid>

                        <!-- The Track lays out the repeat buttons and thumb -->
                        <Track Grid.Row="1" x:Name="PART_Track" Margin="20,0,20,0">
                            <Track.Thumb>
                                <Thumb Style="{DynamicResource SimpleSliderThumb}" x:Name="thumb" Height="Auto" Width="Auto" Margin="0"/>
                            </Track.Thumb>
                            <Track.IncreaseRepeatButton>
                                <RepeatButton Style="{DynamicResource SimpleScrollRepeatButtonStyle}" Command="Slider.IncreaseLarge" BorderThickness="0,0,0,0" Margin="0,0,-20,0"/>
                            </Track.IncreaseRepeatButton>
                            <Track.DecreaseRepeatButton>
                                <RepeatButton Style="{DynamicResource SimpleScrollRepeatButtonStyle}" Command="Slider.DecreaseLarge" BorderThickness="0,0,0,0" Margin="-20,0,0,0"/>
                            </Track.DecreaseRepeatButton>
                        </Track>

                        <TickBar Visibility="Collapsed" Grid.Row="2" x:Name="BottomTick" Height="0" SnapsToDevicePixels="True" Placement="Bottom" Fill="{TemplateBinding Foreground}" SelectionEnd="-1" SelectionStart="-1" TickFrequency="1"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" SourceName="Ricon" Value="True">
                            <Setter Property="Background" TargetName="Ricon" Value="#33FFFFFF"/>
                        </Trigger>
                        <Trigger Property="TickPlacement" Value="TopLeft">
                            <Setter Property="Visibility" Value="Visible" TargetName="TopTick"/>
                            <Setter Property="Margin" TargetName="Border" Value="25,0,25,0"/>
                        </Trigger>
                        <Trigger Property="TickPlacement" Value="BottomRight">
                            <Setter Property="Visibility" Value="Visible" TargetName="BottomTick"/>
                        </Trigger>
                        <Trigger Property="TickPlacement" Value="Both">
                            <Setter Property="Visibility" Value="Visible" TargetName="TopTick"/>
                            <Setter Property="Visibility" Value="Visible" TargetName="BottomTick"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="Border">
                                <Setter.Value>
                                    <SolidColorBrush Color="{DynamicResource UMTinactiveGrey}"/>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Background" TargetName="thumb">
                                <Setter.Value>
                                    <SolidColorBrush Color="{DynamicResource UMTinactiveGrey}"/>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Foreground" TargetName="thumb" Value="{x:Null}"/>
                        </Trigger>

                        <!-- Use a rotation to create a Vertical Slider form the default Horizontal -->
                        <Trigger Property="Orientation" Value="Vertical">
                            <Setter Property="LayoutTransform" TargetName="GridRoot">
                                <Setter.Value>
                                    <RotateTransform Angle="-90"/>
                                </Setter.Value>
                            </Setter>
                            <!-- Track rotates itself based on orientation so need to force it back -->
                            <Setter TargetName="PART_Track" Property="Orientation" Value="Horizontal"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True" SourceName="Licon">
                            <Setter Property="Background" TargetName="Licon" Value="#33FFFFFF"/>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Disabled Brushes are used for the Disabled look of each control -->
    <SolidColorBrush x:Key="DisabledForegroundBrush" Color="#888"/>
    <SolidColorBrush x:Key="UMT inactiveGrey" Color="#FF848484"/>

    <ControlTemplate x:Key="UMTarrow" TargetType="{x:Type ToggleButton}">
        <ControlTemplate.Resources>
            <Storyboard x:Key="check">
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="rectangle" Storyboard.TargetProperty="(UIElement.Opacity)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00" Value="1"/>
                    <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0.5"/>
                    <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="1"/>
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
        </ControlTemplate.Resources>
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="12.5"/>
            </Grid.ColumnDefinitions>
            <Rectangle Grid.ColumnSpan="2" HorizontalAlignment="Stretch" x:Name="Rectangle" VerticalAlignment="Stretch" Width="Auto" Height="Auto" RadiusX="0" RadiusY="0" Fill="{x:Null}" Stroke="{x:Null}"/>
            <Rectangle Grid.Column="0" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Width="Auto" Height="15" RadiusX="0" RadiusY="0" Fill="#19FFFFFF" Stroke="#7FFFFFFF" Margin="0,0,0,0" Opacity="0" x:Name="rectangle"/>
            <Path Grid.Column="1" HorizontalAlignment="Center" x:Name="Arrow" VerticalAlignment="Center" Fill="#FFFFFFFF" Data="M0,-4.5917748E-40 L3.65625,10 7.03125,0.010750002 z" Height="10" Width="7.032"/>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Opacity" TargetName="rectangle" Value="1"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="true">
                <Trigger.ExitActions>
                    <RemoveStoryboard BeginStoryboardName="check_BeginStoryboard"/>
                </Trigger.ExitActions>
                <Trigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource check}" x:Name="check_BeginStoryboard"/>
                </Trigger.EnterActions>
                <Setter Property="Opacity" TargetName="rectangle" Value="1"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Fill" TargetName="Arrow" Value="{DynamicResource UMT inactiveGrey}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- This is the area which contains the selected item in the ComboBox -->

    <ControlTemplate x:Key="ComboBoxTextBox" TargetType="{x:Type TextBox}">
        <!-- This must be named as PART_ContentHost -->
        <Border x:Name="PART_ContentHost" Focusable="False" Background="{TemplateBinding Background}"/>
    </ControlTemplate>

    <!-- NormalBrush is used as the Background for SimpleButton, SimpleRepeatButton -->
    <LinearGradientBrush x:Key="NormalBrush" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#EEE" Offset="0.0"/>
        <GradientStop Color="#CCC" Offset="1.0"/>
    </LinearGradientBrush>

    <Style d:IsControlPart="True" TargetType="{x:Type RepeatButton}" BasedOn="{x:Null}" x:Key="SimpleRepeatButton">
        <Setter Property="Background" Value="{DynamicResource NormalBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Grid>
                        <Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"/>
                        <ContentPresenter HorizontalAlignment="Center" x:Name="ContentPresenter" VerticalAlignment="Center" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter Property="BorderBrush" TargetName="Border" Value="{x:Null}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="Border" Value="#00000000"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" TargetName="Border" Value="#00000000"/>
                            <Setter Property="BorderBrush" TargetName="Border" Value="#00000000"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="BorderBrush" Value="#00AAAAAA" TargetName="Border"/>
                            <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
                            <Setter Property="Background" TargetName="Border" Value="#00EEEEEE"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Simple Thumb - The Thumb is the draggable part of the Scrollbar -->
    <Style x:Key="SimpleThumbStyle" d:IsControlPart="True" TargetType="{x:Type Thumb}" BasedOn="{x:Null}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Grid Margin="0,0,0,0" x:Name="Grid">
                        <Rectangle HorizontalAlignment="Stretch" x:Name="Rectangle" VerticalAlignment="Stretch" Width="Auto" Height="Auto" RadiusX="2" RadiusY="2" Fill="{DynamicResource NormalBrush}" Stroke="{DynamicResource NormalBorderBrush}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True"/>
                        <Trigger Property="IsMouseOver" Value="True"/>
                        <Trigger Property="IsEnabled" Value="False"/>
                        <Trigger Property="IsDragging" Value="True"/>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Simple ScrollBar  This makes use of SimpleThumb, SimpleRepeatButton and SimpleScrollRepeatButton -->

    <Style x:Key="SimpleScrollBar" TargetType="{x:Type ScrollBar}">
        <Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollBar}">
                    <Grid x:Name="GridRoot" Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Background="{TemplateBinding Background}">
                        <Grid.RowDefinitions>
                            <RowDefinition MaxHeight="18"/>
                            <RowDefinition Height="0.00001*"/>
                            <RowDefinition MaxHeight="18"/>
                        </Grid.RowDefinitions>

                        <RepeatButton x:Name="DecreaseRepeat" Style="{DynamicResource SimpleRepeatButton}" Command="ScrollBar.LineUpCommand">
                            <Grid>
                                <Path x:Name="DecreaseArrow" Stroke="{TemplateBinding Foreground}" StrokeThickness="1" Data="M 0 4 L 8 4 L 4 0 Z"/>
                            </Grid>
                        </RepeatButton>

                        <!-- Track is a special layout container which sizes the thumb and the repeat button which do jump scrolling either side of it -->
                        <Track Grid.Row="1" x:Name="PART_Track" Orientation="Vertical" IsDirectionReversed="true">
                            <Track.Thumb>
                                <Thumb Style="{DynamicResource SimpleThumbStyle}"/>
                            </Track.Thumb>
                            <Track.IncreaseRepeatButton>
                                <RepeatButton x:Name="PageUp" Style="{DynamicResource SimpleScrollRepeatButtonStyle}" Command="ScrollBar.PageDownCommand"/>
                            </Track.IncreaseRepeatButton>
                            <Track.DecreaseRepeatButton>
                                <RepeatButton x:Name="PageDown" Style="{DynamicResource SimpleScrollRepeatButtonStyle}" Command="ScrollBar.PageUpCommand"/>
                            </Track.DecreaseRepeatButton>
                        </Track>

                        <RepeatButton Grid.Row="2" x:Name="IncreaseRepeat" Style="{DynamicResource SimpleRepeatButton}" Command="ScrollBar.LineDownCommand">
                            <Grid>
                                <Path x:Name="IncreaseArrow" Stroke="{TemplateBinding Foreground}" StrokeThickness="1" Data="M 0 0 L 4 4 L 8 0 Z"/>
                            </Grid>
                        </RepeatButton>
                    </Grid>

                    <!-- This uses a single template for ScrollBar and rotate it to be Horizontal
					It also changes the commands so that the it does Left and Right instead of Up and Down Commands -->
                    <ControlTemplate.Triggers>
                        <Trigger Property="Orientation" Value="Horizontal">

                            <!-- Rotate the ScrollBar from Vertical to Horizontal -->
                            <Setter Property="LayoutTransform" TargetName="GridRoot">
                                <Setter.Value>
                                    <RotateTransform Angle="-90"/>
                                </Setter.Value>
                            </Setter>

                            <!-- Track is bound to Orientation internally, so we need to rotate it back to Vertical -->
                            <Setter TargetName="PART_Track" Property="Orientation" Value="Vertical"/>

                            <!-- Change the commands to do Horizontal commands -->
                            <Setter Property="Command" Value="ScrollBar.LineLeftCommand" TargetName="DecreaseRepeat"/>
                            <Setter Property="Command" Value="ScrollBar.LineRightCommand" TargetName="IncreaseRepeat"/>
                            <Setter Property="Command" Value="ScrollBar.PageLeftCommand" TargetName="PageDown"/>
                            <Setter Property="Command" Value="ScrollBar.PageRightCommand" TargetName="PageUp"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Simple ScrollViewer 
	ScrollViewer is a Grid control which has a ContentPresenter and a Horizontal and Vertical ScrollBar 
	It is used by ListBox, MenuItem, ComboBox, and TreeView -->
    <Style TargetType="{x:Type ScrollViewer}" BasedOn="{x:Null}" x:Key="SimpleScrollViewer">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Grid Background="{TemplateBinding Background}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <ScrollContentPresenter Grid.Column="0" Grid.Row="0" Margin="{TemplateBinding Padding}" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" CanContentScroll="{TemplateBinding CanContentScroll}"/>

                        <!-- The visibility of the ScrollBars is controlled by the implementation fo the control -->
                        <ScrollBar Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Grid.Column="0" Grid.Row="1" x:Name="PART_HorizontalScrollBar" Style="{DynamicResource SimpleScrollBar}" Orientation="Horizontal" Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportWidth}" Minimum="0" Maximum="{TemplateBinding ScrollableWidth}" AutomationProperties.AutomationId="HorizontalScrollBar"/>
                        <ScrollBar Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Grid.Column="1" Grid.Row="0" x:Name="PART_VerticalScrollBar" Style="{DynamicResource SimpleScrollBar}" Orientation="Vertical" Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportHeight}" Minimum="0" Maximum="{TemplateBinding ScrollableHeight}" AutomationProperties.AutomationId="VerticalScrollBar"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="UMTcombo01" TargetType="{x:Type ComboBox}">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Grid>
                        <!-- The ToggleButton is databound to the ComboBox itself to toggle IsDropDownOpen -->
                        <ToggleButton Grid.Column="2" Template="{DynamicResource UMTarrow}" x:Name="ToggleButton" Focusable="false" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" ClickMode="Press"/>
                        <ContentPresenter HorizontalAlignment="Left" Margin="6,0,12,0" x:Name="ContentSite" VerticalAlignment="Center" Content="{TemplateBinding SelectionBoxItem}" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" IsHitTestVisible="False"/>

                        <!-- The TextBox must be named PART_EditableTextBox or ComboBox will not recognize it -->
                        <TextBox Visibility="Hidden" Template="{DynamicResource ComboBoxTextBox}" HorizontalAlignment="Left" Margin="3,3,23,3" x:Name="PART_EditableTextBox" Style="{x:Null}" VerticalAlignment="Center" Focusable="True" Background="Transparent" IsReadOnly="{TemplateBinding IsReadOnly}"/>

                        <!-- The Popup shows the list of items in the ComboBox. IsOpen is databound to IsDropDownOpen which is toggled via the ComboBoxToggleButton -->
                        <Popup IsOpen="{TemplateBinding IsDropDownOpen}" Placement="Bottom" x:Name="Popup" Focusable="False" AllowsTransparency="True" PopupAnimation="Slide">
                            <Grid MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{TemplateBinding ActualWidth}" x:Name="DropDown" SnapsToDevicePixels="True" Margin="0,5,0,0">
                                <Border x:Name="DropDownBorder" BorderBrush="#FF2C3A41" BorderThickness="1" Background="#FF202F36"/>
                                <ScrollViewer Margin="3,3,5,5" Style="{DynamicResource SimpleScrollViewer}" SnapsToDevicePixels="True" HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto" CanContentScroll="True" Foreground="#FFFFFFFF">

                                    <!-- The StackPanel is used to display the children by setting IsItemsHost to be True -->
                                    <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained"/>

                                </ScrollViewer>
                            </Grid>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <!-- This forces the DropDown to have a minimum size if it is empty -->
                        <Trigger Property="HasItems" Value="false">
                            <Setter Property="MaxHeight" TargetName="DropDown" Value="120"/>
                            <Setter Property="MinHeight" TargetName="DropDownBorder" Value="50"/>
                            <Setter Property="MinWidth" TargetName="DropDown" Value="100"/>
                            <Setter Property="Background" TargetName="ToggleButton" Value="#FFFFFFFF"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
                        </Trigger>
                        <Trigger Property="IsGrouping" Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                        </Trigger>
                        <Trigger Property="AllowsTransparency" SourceName="Popup" Value="true">
                            <Setter Property="Margin" Value="0,5,0,0" TargetName="DropDownBorder"/>
                            <Setter Property="CornerRadius" TargetName="DropDownBorder" Value="0,0,0,0"/>
                        </Trigger>
                        <Trigger Property="IsEditable" Value="true">
                            <Setter Property="IsTabStop" Value="false"/>
                            <Setter Property="Visibility" Value="Visible" TargetName="PART_EditableTextBox"/>
                            <Setter Property="Visibility" Value="Hidden" TargetName="ContentSite"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Color x:Key="WaterFill">#FF191919</Color>
    <Style x:Key="UMTcomboBoxItem01" TargetType="{x:Type ComboBoxItem}">
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Padding" Value="3,0,3,0"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                    <Border SnapsToDevicePixels="true" x:Name="Bd" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}">
                        <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsHighlighted" Value="true">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
                            <Setter Property="Background" TargetName="Bd">
                                <Setter.Value>
                                    <SolidColorBrush Color="{DynamicResource WaterFill}"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- LightBrush is used for content areas such as Menu, Tab Control background -->
    <LinearGradientBrush x:Key="LightBrush" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#FFF" Offset="0.0"/>
        <GradientStop Color="#EEE" Offset="1.0"/>
    </LinearGradientBrush>

    <!-- Used for Checkmark, Radio button, TreeViewItem, Expander ToggleButton glyphs -->
    <SolidColorBrush x:Key="GlyphBrush" Color="#444"/>


    <!-- Simple Expander ToggleButton - This Button is used by the Expander control. When it is toggled it switches visibility on the Up_Arrow and Down_Arrow -->
    <ControlTemplate x:Key="ExpanderToggleButton" TargetType="{x:Type ToggleButton}">
        <Grid>
            <Rectangle Margin="0,0,0,0" x:Name="Rectangle" Fill="Transparent" Stroke="{DynamicResource NormalBorderBrush}"/>
            <Path HorizontalAlignment="Center" x:Name="Up_Arrow" VerticalAlignment="Center" Fill="{DynamicResource GlyphBrush}" Data="M 0 0 L 4 4 L 8 0 Z"/>
            <Path Visibility="Collapsed" HorizontalAlignment="Center" x:Name="Down_Arrow" VerticalAlignment="Center" Fill="{DynamicResource GlyphBrush}" Data="M 0 4 L 4 0 L 8 4 Z"/>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Fill" Value="{DynamicResource MouseOverBrush}" TargetName="Rectangle"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="true">
                <Setter Property="Fill" Value="{DynamicResource PressedBrush}" TargetName="Rectangle"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="true">
                <Setter Property="Visibility" Value="Visible" TargetName="Down_Arrow"/>
                <Setter Property="Visibility" Value="Collapsed" TargetName="Up_Arrow"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Fill" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Rectangle"/>
                <Setter Property="Stroke" Value="{DynamicResource DisabledBorderBrush}" TargetName="Rectangle"/>
                <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
                <Setter Property="Fill" Value="{DynamicResource DisabledForegroundBrush}" TargetName="Up_Arrow"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- Simple CheckBox -->
    <Style x:Key="komunaShowHideCheckbox" TargetType="{x:Type CheckBox}">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="FocusVisualStyle" Value="{DynamicResource CheckBoxFocusVisual}"/>
        <Setter Property="Background" Value="{DynamicResource NormalBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">

                    <!-- BulletDecorator is used to provide baseline alignment between the checkmark and the Content -->
                    <BulletDecorator Background="Transparent">
                        <BulletDecorator.Bullet>
                            <Grid Width="13" Height="13">
                                <Ellipse x:Name="ellipse" Fill="#FFD8D8D8" StrokeThickness="1" Margin="4.056,3.544,3.888,3.358"/>
                                <Path x:Name="ellipse1_Copy" Fill="{x:Null}" Stretch="Fill" Stroke="White" StrokeThickness="1" Margin="0.047,5.835,0.12,-0.817" Data="M12.416333,2.8153333 C12.416333,2.8153333 10.833714,0.50000001 6.7504985,0.50000001 2.667283,0.50000001 0.58299434,4.6069999 0.58299434,4.6069999 0.58299434,4.6069999 2.6663333,7.4819999 6.7496667,7.4819999 10.833,7.4819999 12.416333,2.8153333 12.416333,2.8153333 z" RenderTransformOrigin="0.498619198716066,0.236344272642793">
                                    <Path.RenderTransform>
                                        <TransformGroup>
                                            <ScaleTransform ScaleX="1" ScaleY="-1"/>
                                            <SkewTransform AngleX="0" AngleY="0"/>
                                            <RotateTransform Angle="0"/>
                                            <TranslateTransform Y="0.95899999999999963"/>
                                        </TransformGroup>
                                    </Path.RenderTransform>
                                </Path>
                                <Path x:Name="ellipse1_Copy1" Fill="{x:Null}" Stretch="Fill" Stroke="White" StrokeThickness="1" Margin="0.047,5.835,0.12,2.058" Data="M12.416333,2.8153333 C12.416333,2.8153333 10.833714,0.50000001 6.7504985,0.50000001 2.667283,0.50000001 0.58299434,4.6069999 0.58299434,4.6069999 0.58299434,4.6069999 3.7080838,0.81533329 6.624834,0.81533329 9.5415842,0.81533329 12.416333,2.8153333 12.416333,2.8153333 z" RenderTransformOrigin="0.498619198716066,0.236344272642793" StrokeEndLineCap="Round" StrokeLineJoin="Round" StrokeStartLineCap="Round" Visibility="Hidden">
                                    <Path.RenderTransform>
                                        <TransformGroup>
                                            <ScaleTransform ScaleX="1" ScaleY="-1"/>
                                            <SkewTransform AngleX="0" AngleY="0"/>
                                            <RotateTransform Angle="0"/>
                                            <TranslateTransform Y="2.3179795676960593"/>
                                        </TransformGroup>
                                    </Path.RenderTransform>
                                </Path>
                            </Grid>
                        </BulletDecorator.Bullet>
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True"/>
                    </BulletDecorator>

                    <!-- This uses Visibility to hide and show the CheckMark on IsChecked -->
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="false">
                            <Setter Property="Visibility" TargetName="ellipse" Value="Hidden"/>
                            <Setter Property="Visibility" TargetName="ellipse1_Copy1" Value="Visible"/>
                            <Setter Property="Visibility" TargetName="ellipse1_Copy" Value="Hidden"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true"/>
                        <Trigger Property="IsPressed" Value="true"/>
                        <Trigger Property="IsEnabled" Value="false"/>
                    </ControlTemplate.Triggers>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Simple Expander 
	 This uses the Simpler ExpanderToggleButton. It sets Visibility on the ContentPresenter to expand
	 Limitations : The Simple Expander only expands down -->
    <Style x:Key="komunaExpender" TargetType="{x:Type Expander}">
        <Setter Property="Background" Value="{DynamicResource LightBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Expander}">
                    <Grid RenderTransformOrigin="0.5,0.5">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*" x:Name="ContentRow"/>
                        </Grid.RowDefinitions>
                        <Grid.RenderTransform>
                            <TransformGroup>
                                <ScaleTransform ScaleX="-1" ScaleY="1"/>
                                <SkewTransform AngleX="0" AngleY="0"/>
                                <RotateTransform Angle="0"/>
                                <TranslateTransform/>
                            </TransformGroup>
                        </Grid.RenderTransform>
                        <Border Grid.Row="0" x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="0" Height="20" BorderThickness="0">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="15           "/>
                                    <ColumnDefinition Width="*"/>
                                </Grid.ColumnDefinitions>
                                <ToggleButton x:Name="toggleButton" Template="{DynamicResource komunaExpenderToggleButton}" Background="{DynamicResource NormalBrush}" IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" OverridesDefaultStyle="True"/>
                                <WrapPanel Margin="0" VerticalAlignment="Stretch" Height="15.083" Grid.Column="1" Orientation="Horizontal" d:LayoutOverrides="Width">
                                    <ContentPresenter Margin="0" RecognizesAccessKey="True" ContentSource="Header" HorizontalAlignment="Left" VerticalAlignment="Stretch" RenderTransformOrigin="0.5,0.5">
                                        <ContentPresenter.RenderTransform>
                                            <TransformGroup>
                                                <ScaleTransform ScaleX="-1" ScaleY="1"/>
                                                <SkewTransform AngleX="0" AngleY="0"/>
                                                <RotateTransform Angle="0"/>
                                                <TranslateTransform/>
                                            </TransformGroup>
                                        </ContentPresenter.RenderTransform>
                                    </ContentPresenter>
                                    <CheckBox HorizontalAlignment="Left" Margin="7,0,0,0" Style="{DynamicResource komunaShowHideCheckbox}" VerticalAlignment="Center" Content="" IsChecked="True" d:LayoutOverrides="GridBox"/>
                                </WrapPanel>
                            </Grid>
                        </Border>
                        <Border Visibility="Collapsed" Grid.Row="1" x:Name="ExpandSite" BorderBrush="{DynamicResource SolidBorderBrush}" BorderThickness="0" CornerRadius="0" Background="#FF202F36" Margin="0,5,0,0">
                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Focusable="false"/>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="True">
                            <Setter Property="Visibility" Value="Visible" TargetName="ExpandSite"/>
                            <Setter Property="BorderThickness" TargetName="ExpandSite" Value="0"/>
                            <Setter Property="Background" TargetName="ExpandSite">
                                <Setter.Value>
                                    <SolidColorBrush Color="{DynamicResource blueBackground}"/>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="BorderBrush" TargetName="ExpandSite" Value="{x:Null}"/>
                            <Setter Property="Grid.ColumnSpan" TargetName="toggleButton" Value="1"/>
                            <Setter Property="Grid.Column" TargetName="toggleButton" Value="0"/>
                            <Setter Property="HorizontalAlignment" TargetName="toggleButton" Value="Stretch"/>
                            <Setter Property="Width" TargetName="toggleButton" Value="Auto"/>
                            <Setter Property="Margin" TargetName="toggleButton" Value="0"/>
                            <Setter Property="CornerRadius" TargetName="Border" Value="2,2,0,0"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border"/>
                            <Setter Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" TargetName="Border"/>
                            <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Simple Expander ToggleButton - This Button is used by the Expander control. When it is toggled it switches visibility on the Up_Arrow and Down_Arrow -->
    <ControlTemplate x:Key="komunaExpenderToggleButton" TargetType="{x:Type ToggleButton}">
        <Grid>
            <Rectangle Margin="0,0,0,0" x:Name="Rectangle" Fill="Transparent" Stroke="{x:Null}"/>
            <Path HorizontalAlignment="Right" x:Name="Up_Arrow" VerticalAlignment="Bottom" Fill="#FF75A8C1" Data="M 0 0 L 4 4 L 8 0 Z" Margin="0,0,0,7.801" RenderTransformOrigin="0.5,0.5">
                <Path.RenderTransform>
                    <TransformGroup>
                        <ScaleTransform/>
                        <SkewTransform/>
                        <RotateTransform Angle="-90"/>
                        <TranslateTransform/>
                    </TransformGroup>
                </Path.RenderTransform>
            </Path>
            <Path Visibility="Collapsed" HorizontalAlignment="Center" x:Name="Down_Arrow" VerticalAlignment="Stretch" Fill="{DynamicResource GlyphBrush}" Data="M 0 4 L 4 0 L 8 4 Z" Margin="0,8.637,0,7.638" RenderTransformOrigin="0.5,0.5" d:LayoutOverrides="Height">
                <Path.RenderTransform>
                    <TransformGroup>
                        <ScaleTransform/>
                        <SkewTransform/>
                        <RotateTransform/>
                        <TranslateTransform/>
                    </TransformGroup>
                </Path.RenderTransform>
            </Path>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Fill" TargetName="Rectangle" Value="{x:Null}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="true">
                <Setter Property="Fill" TargetName="Rectangle" Value="{x:Null}"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="true">
                <Setter Property="Visibility" Value="Visible" TargetName="Down_Arrow"/>
                <Setter Property="Visibility" Value="Collapsed" TargetName="Up_Arrow"/>
                <Setter Property="RenderTransform" TargetName="Down_Arrow">
                    <Setter.Value>
                        <TransformGroup>
                            <ScaleTransform/>
                            <SkewTransform/>
                            <RotateTransform Angle="180"/>
                            <TranslateTransform/>
                        </TransformGroup>
                    </Setter.Value>
                </Setter>
                <Setter Property="Fill" TargetName="Down_Arrow" Value="#FF75A8C1"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
                <Setter Property="Fill" Value="{DynamicResource DisabledForegroundBrush}" TargetName="Up_Arrow"/>
                <Setter Property="Stroke" TargetName="Rectangle" Value="{x:Null}"/>
                <Setter Property="Fill" TargetName="Rectangle" Value="{DynamicResource LightBorderBrush}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="TreeViewItemFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ExpandCollapseToggleStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Width" Value="19"/>
        <Setter Property="Height" Value="13"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Width="19" Height="13" Background="Transparent">
                        <Border Width="9" Height="9" SnapsToDevicePixels="true" BorderBrush="#FF9495A2" BorderThickness="1" CornerRadius="1">
                            <Border.Background>
                                <LinearGradientBrush EndPoint="1,1" StartPoint="0,0">
                                    <GradientStop Color="White" Offset=".4"/>
                                    <GradientStop Color="#FFC6CEDA" Offset="1"/>
                                </LinearGradientBrush>
                            </Border.Background>
                            <Path x:Name="ExpandPath" Fill="Black" Margin="1,1,1,1" Data="M 0 2 L 0 3 L 2 3 L 2 5 L 3 5 L 3 3 L 5 3 L 5 2 L 3 2 L 3 0 L 2 0 L 2 2 Z"/>
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Data" TargetName="ExpandPath" Value="M 0 2 L 0 3 L 5 3 L 5 2 Z"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="komunaTreeViewToggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Width" Value="19"/>
        <Setter Property="Height" Value="13"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Width="19" Height="13" Background="Transparent">
                        <Border Background="{x:Null}" Width="9" Height="9" SnapsToDevicePixels="true" BorderBrush="{x:Null}" BorderThickness="1" CornerRadius="1">
                            <Path x:Name="ExpandPath" Fill="White" Margin="1,1,1,1" Data="M 0 2 L 0 3 L 2 3 L 2 5 L 3 5 L 3 3 L 5 3 L 5 2 L 3 2 L 3 0 L 2 0 L 2 2 Z"/>
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Data" TargetName="ExpandPath" Value="M 0 2 L 0 3 L 5 3 L 5 2 Z"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="komunaTreeViewItemHebrew" TargetType="{x:Type TreeViewItem}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Padding" Value="1,0,0,0"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="FocusVisualStyle" Value="{StaticResource TreeViewItemFocusVisual}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeViewItem}">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition/>
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition MinWidth="10" Width="Auto"/>
                            <ColumnDefinition  MinWidth="128" Width="Auto"/>
                            <ColumnDefinition Width="10*"/>
                        </Grid.ColumnDefinitions>
                        <ToggleButton x:Name="Expander" Style="{DynamicResource komunaTreeViewToggleButton}"  ClickMode="Press" IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}" />
                        <Border x:Name="Bd" SnapsToDevicePixels="true" Grid.Column="1" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}">
                            <ContentPresenter x:Name="PART_Header" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RenderTransformOrigin="0.5,0.5" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" ContentSource="Header"/>
                          <!--<TextBlock Text="{Binding TaskName}" ></TextBlock>-->
                        </Border>
                      
                        <ItemsPresenter x:Name="ItemsHost" Grid.Column="1" Grid.ColumnSpan="2" Grid.Row="1"/>
                        <CheckBox  Grid.Column="2" Style="{DynamicResource komunaShowHideCheckbox}" HorizontalAlignment="Right" Margin="0,0,0,0" d:LayoutOverrides="Height" IsChecked="True"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="True">
                            <Setter Property="Foreground" Value="White"/>
                        </Trigger>
                        <Trigger Property="IsExpanded" Value="false">
                            <Setter Property="Visibility" TargetName="ItemsHost" Value="Collapsed"/>
                            <Setter Property="Foreground" Value="White"/>
                        </Trigger>
                        <Trigger Property="HasItems" Value="false">
                            <Setter Property="Visibility" TargetName="Expander" Value="Hidden"/>
                            <Setter Property="Foreground" Value="White"/>
                        </Trigger>
                        <Trigger Property="IsSelected" Value="true">
                            <Setter Property="Foreground" Value="White"/>
                            <Setter Property="FontWeight" Value="Bold" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="true"/>
                                <Condition Property="IsSelectionActive" Value="false"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Foreground" Value="White"/>
                            <Setter Property="FontWeight" Value="Bold" />
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="VirtualizingStackPanel.IsVirtualizing" Value="true">
                <Setter Property="ItemsPanel">
                    <Setter.Value>
                        <ItemsPanelTemplate>
                            <VirtualizingStackPanel/>
                        </ItemsPanelTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="Edit" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid RenderTransformOrigin="0.5,0.5">
                        <Grid.RenderTransform>
                            <TransformGroup>
                                <ScaleTransform ScaleX="-1" ScaleY="1"/>
                                <SkewTransform AngleX="0" AngleY="0"/>
                                <RotateTransform Angle="0"/>
                                <TranslateTransform/>
                            </TransformGroup>
                        </Grid.RenderTransform>
                        <Path x:Name="path1" Stretch="Fill" Stroke="{x:Null}" Margin="4.547,0,0,1.129" Data="M-0.58170498,0.59552745 L3.918295,5.0955275 -0.90001594,5.1043245 z" RenderTransformOrigin="0.5,0.5" HorizontalAlignment="Left" VerticalAlignment="Bottom" Width="2.399" Height="3.3" Fill="White">
                            <Path.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform ScaleX="1.1692928792256148" ScaleY="0.85521772839518873"/>
                                    <SkewTransform AngleY="-21.54586089338224"/>
                                    <RotateTransform Angle="-12.71006955330888"/>
                                    <TranslateTransform X="-1.2720314503258696" Y="-0.44552101166186731"/>
                                </TransformGroup>
                            </Path.RenderTransform>
                        </Path>
                        <Rectangle x:Name="rectangle" Stroke="{x:Null}" HorizontalAlignment="Left" Margin="4.078,2.871,0,3.865" Width="3.177" RenderTransformOrigin="0.5,0.5" Fill="White">
                            <Rectangle.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform/>
                                    <SkewTransform/>
                                    <RotateTransform Angle="21.517"/>
                                    <TranslateTransform X="0.3937869472130347" Y="0.053542235508340585"/>
                                </TransformGroup>
                            </Rectangle.RenderTransform>
                        </Rectangle>
                        <Rectangle x:Name="rectangle1" Stroke="{x:Null}" HorizontalAlignment="Left" Margin="4.147,0.178,0,0" VerticalAlignment="Top" Width="3.177" Height="1.944" RenderTransformOrigin="0.5,0.5" Fill="White">
                            <Rectangle.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform/>
                                    <SkewTransform/>
                                    <RotateTransform Angle="21.517"/>
                                    <TranslateTransform X="2.1436813073331256" Y="0.38603902739640983"/>
                                </TransformGroup>
                            </Rectangle.RenderTransform>
                        </Rectangle>
                        <Path x:Name="path" Fill="{x:Null}" Stretch="Fill" Margin="3.017,0,5.087,0" VerticalAlignment="Bottom" Height="Auto" Data="M6.663,14.0625 L19.038,14.0625" Stroke="#FFF0FFED"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True"/>
                        <Trigger Property="IsDefaulted" Value="True"/>
                        <Trigger Property="IsMouseOver" Value="True"/>
                        <Trigger Property="IsPressed" Value="True"/>
                        <Trigger Property="IsEnabled" Value="False"/>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <SolidColorBrush x:Key="ListBorder" Color="#FFA5ACB2"/>
    <Style x:Key="komunaTreeViewCont" TargetType="{x:Type TreeView}">
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
        <Setter Property="BorderBrush" Value="{StaticResource ListBorder}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeView}">
                    <Border SnapsToDevicePixels="true" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                        <ScrollViewer x:Name="_tv_scrollviewer_" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" Focusable="false" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" CanContentScroll="false" HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}" VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}">
                            <ItemsPresenter/>
                        </ScrollViewer>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="VirtualizingStackPanel.IsVirtualizing" Value="true">
                            <Setter Property="CanContentScroll" TargetName="_tv_scrollviewer_" Value="true"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="VirtualizingStackPanel.IsVirtualizing" Value="true">
                <Setter Property="ItemsPanel">
                    <Setter.Value>
                        <ItemsPanelTemplate>
                            <VirtualizingStackPanel/>
                        </ItemsPanelTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>
    <LinearGradientBrush x:Key="CheckRadioFillNormal">
        <GradientStop Color="#FFD2D4D2" Offset="0"/>
        <GradientStop Color="#FFFFFFFF" Offset="1"/>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="CheckRadioStrokeNormal">
        <GradientStop Color="#FF004C94" Offset="0"/>
        <GradientStop Color="#FF003C74" Offset="1"/>
    </LinearGradientBrush>
    <Style x:Key="CheckRadioFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Stroke="Black" StrokeDashArray="1 2" StrokeThickness="1" Margin="14,0,0,0" SnapsToDevicePixels="true"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="komunaTextRadioBTN" TargetType="{x:Type RadioButton}">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="Background" Value="{StaticResource CheckRadioFillNormal}"/>
        <Setter Property="BorderBrush" Value="{StaticResource CheckRadioStrokeNormal}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <BulletDecorator Background="Transparent">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True" RenderTransformOrigin="0.5,0.5">
                        </ContentPresenter>
                    </BulletDecorator>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasContent" Value="true">
                            <Setter Property="FocusVisualStyle" Value="{StaticResource CheckRadioFocusVisual}"/>
                            <Setter Property="Padding" Value="2,0,0,0"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="True">
                            <Setter Property="Foreground" Value="White"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Foreground" Value="White"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Foreground" Value="#7FFFFFFF"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="False">
                            <Setter Property="Foreground" Value="#26FFFFFF"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="dashObject" TargetType="{x:Type CheckBox}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <Grid>
                        <Path x:Name="dash" Stretch="Fill" Stroke="#FFE7FF00" StrokeDashArray="1 0" StrokeThickness="3" RenderTransformOrigin="0.5,0.5" Data="M1096.5,181.5 L909,264 889.5,433.5 1035,568.5 1194,432 1273.5,413.5 z" Fill="{x:Null}">
                            <Path.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform/>
                                    <SkewTransform/>
                                    <RotateTransform Angle="33.495"/>
                                    <TranslateTransform/>
                                </TransformGroup>
                            </Path.RenderTransform>
                        </Path>
                        <Path x:Name="dash_Copy" Stretch="Fill" Stroke="#0073D823" StrokeDashArray="1 0" StrokeThickness="3" RenderTransformOrigin="0.5,0.5" Data="M1096.5,181.5 L909,264 889.5,433.5 1035,568.5 1194,432 1273.5,413.5 z">
                            <Path.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform/>
                                    <SkewTransform/>
                                    <RotateTransform Angle="33.495"/>
                                    <TranslateTransform/>
                                </TransformGroup>
                            </Path.RenderTransform>
                        </Path>
                        <Rectangle x:Name="rectangle" Fill="White" Stroke="Black" StrokeThickness="1" HorizontalAlignment="Right" Margin="0,0,59,60.155" VerticalAlignment="Bottom" Width="10" Height="10" Visibility="Collapsed"/>
                        <Rectangle x:Name="rectangle1" Fill="White" Stroke="Black" StrokeThickness="1" HorizontalAlignment="Right" Margin="0,43.5,79,0" VerticalAlignment="Top" Width="10" Height="10" Visibility="Collapsed"/>
                        <Rectangle x:Name="rectangle2" Fill="White" Stroke="Black" StrokeThickness="1" HorizontalAlignment="Left" Margin="121,0,0,0" VerticalAlignment="Top" Width="10" Height="10" Visibility="Collapsed"/>
                        <Rectangle x:Name="rectangle3" Fill="White" Stroke="Black" StrokeThickness="1" HorizontalAlignment="Left" Margin="0,147,0,0" VerticalAlignment="Top" Width="10" Height="10" Visibility="Collapsed"/>
                        <Rectangle x:Name="rectangle4" Fill="White" Stroke="Black" StrokeThickness="1" HorizontalAlignment="Right" Margin="0,0,139.5,87.655" VerticalAlignment="Bottom" Width="10" Height="10" Visibility="Collapsed"/>
                        <Rectangle x:Name="rectangle5" Fill="White" Stroke="Black" StrokeThickness="1" HorizontalAlignment="Left" Margin="50.5,0,0,60.155" VerticalAlignment="Bottom" Width="10" Height="10" Visibility="Collapsed"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="StrokeThickness" TargetName="dash" Value="5"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Visibility" TargetName="rectangle" Value="Visible"/>
                            <Setter Property="Visibility" TargetName="rectangle1" Value="Visible"/>
                            <Setter Property="Visibility" TargetName="rectangle2" Value="Visible"/>
                            <Setter Property="Visibility" TargetName="rectangle3" Value="Visible"/>
                            <Setter Property="Visibility" TargetName="rectangle4" Value="Visible"/>
                            <Setter Property="Visibility" TargetName="rectangle5" Value="Visible"/>
                            <Setter Property="StrokeThickness" TargetName="dash" Value="4"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <PathGeometry x:Key="Checkmark" Figures="M0,2 L0,4.8 L2.5,7.4 L7.1,2.8 L7.1,0 L2.5,4.6 z"/>
    
    <ControlTemplate x:Key="{ComponentResourceKey ResourceId=SubmenuItemTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}" TargetType="{x:Type MenuItem}">
        <Border x:Name="border" SnapsToDevicePixels="true" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
            <Grid RenderTransformOrigin="0.5,0.5">

                <Grid.ColumnDefinitions>
                    <ColumnDefinition SharedSizeGroup="MenuItemIconColumnGroup" MinWidth="17" Width="Auto"/>
                    <ColumnDefinition MinWidth="5" Width="Auto"/>
                    <ColumnDefinition SharedSizeGroup="MenuItemIGTColumnGroup" Width="Auto"/>
                    <ColumnDefinition Width="14"/>
                </Grid.ColumnDefinitions>
                <ContentPresenter x:Name="Icon" Margin="4,0,6,0" VerticalAlignment="Center" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" ContentSource="Icon"/>
                <ContentPresenter Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Grid.Column="1" ContentSource="Header" RecognizesAccessKey="True" RenderTransformOrigin="0.5,0.5">

                </ContentPresenter>
                <TextBlock x:Name="InputGestureText" Margin="5,2,0,2" Grid.Column="2" DockPanel.Dock="Right" Text="{TemplateBinding InputGestureText}"/>
                <Rectangle x:Name="rectangle" Fill="#7FFFFFFF" Margin="0,2,0,0" Width="3" Height="3" VerticalAlignment="Center" HorizontalAlignment="Center"/>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsCheckable" Value="False">
                <Setter Property="Visibility" TargetName="rectangle" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" TargetName="border" Value="#19FFFFFF"/>
            </Trigger>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="true">
                <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
                <Setter Property="Width" TargetName="rectangle" Value="3"/>
                <Setter Property="Height" TargetName="rectangle" Value="3"/>
                <Setter Property="Fill" TargetName="rectangle" Value="White"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style x:Key="MenuScrollButton" BasedOn="{x:Null}" TargetType="{x:Type RepeatButton}">
        <Setter Property="ClickMode" Value="Hover"/>
        <Setter Property="MinWidth" Value="0"/>
        <Setter Property="MinHeight" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <DockPanel SnapsToDevicePixels="true" Background="Transparent">
                        <Rectangle x:Name="R1" Fill="Transparent" Width="1" DockPanel.Dock="Right"/>
                        <Rectangle x:Name="B1" Fill="Transparent" Height="1" DockPanel.Dock="Bottom"/>
                        <Rectangle x:Name="L1" Fill="Transparent" Width="1" DockPanel.Dock="Left"/>
                        <Rectangle x:Name="T1" Fill="Transparent" Height="1" DockPanel.Dock="Top"/>
                        <ContentPresenter x:Name="ContentContainer" HorizontalAlignment="Center" Margin="2,2,2,2" VerticalAlignment="Center"/>
                    </DockPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Fill" TargetName="R1" Value="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}"/>
                            <Setter Property="Fill" TargetName="B1" Value="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}"/>
                            <Setter Property="Fill" TargetName="L1" Value="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}"/>
                            <Setter Property="Fill" TargetName="T1" Value="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}"/>
                            <Setter Property="Margin" TargetName="ContentContainer" Value="3,3,1,1"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Geometry x:Key="UpArrow">M 0,4 L 3.5,0 L 7,4 Z</Geometry>
    <MenuScrollingVisibilityConverter x:Key="MenuScrollingVisibilityConverter"/>
    <Geometry x:Key="DownArrow">M 0,0 L 3.5,4 L 7,0 Z</Geometry>
    <Style x:Key="{ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}" BasedOn="{x:Null}" TargetType="{x:Type ScrollViewer}">
        <Setter Property="HorizontalScrollBarVisibility" Value="Hidden"/>
        <Setter Property="VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Grid SnapsToDevicePixels="true">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <Border Grid.Column="0" Grid.Row="1">
                            <ScrollContentPresenter Margin="{TemplateBinding Padding}"/>
                        </Border>
                        <RepeatButton Style="{StaticResource MenuScrollButton}" Focusable="false" Command="{x:Static ScrollBar.LineUpCommand}" CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}" Grid.Column="0" Grid.Row="0">
                            <RepeatButton.Visibility>
                                <MultiBinding FallbackValue="Visibility.Collapsed" Converter="{StaticResource MenuScrollingVisibilityConverter}" ConverterParameter="0">
                                    <Binding Path="ComputedVerticalScrollBarVisibility" RelativeSource="{RelativeSource TemplatedParent}"/>
                                    <Binding Path="VerticalOffset" RelativeSource="{RelativeSource TemplatedParent}"/>
                                    <Binding Path="ExtentHeight" RelativeSource="{RelativeSource TemplatedParent}"/>
                                    <Binding Path="ViewportHeight" RelativeSource="{RelativeSource TemplatedParent}"/>
                                </MultiBinding>
                            </RepeatButton.Visibility>
                            <Path Fill="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" Data="{StaticResource UpArrow}"/>
                        </RepeatButton>
                        <RepeatButton Style="{StaticResource MenuScrollButton}" Focusable="false" Command="{x:Static ScrollBar.LineDownCommand}" CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}" Grid.Column="0" Grid.Row="2">
                            <RepeatButton.Visibility>
                                <MultiBinding FallbackValue="Visibility.Collapsed" Converter="{StaticResource MenuScrollingVisibilityConverter}" ConverterParameter="100">
                                    <Binding Path="ComputedVerticalScrollBarVisibility" RelativeSource="{RelativeSource TemplatedParent}"/>
                                    <Binding Path="VerticalOffset" RelativeSource="{RelativeSource TemplatedParent}"/>
                                    <Binding Path="ExtentHeight" RelativeSource="{RelativeSource TemplatedParent}"/>
                                    <Binding Path="ViewportHeight" RelativeSource="{RelativeSource TemplatedParent}"/>
                                </MultiBinding>
                            </RepeatButton.Visibility>
                            <Path Fill="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" Data="{StaticResource DownArrow}"/>
                        </RepeatButton>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="{ComponentResourceKey ResourceId=TopLevelHeaderTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}" TargetType="{x:Type MenuItem}">
        <Border SnapsToDevicePixels="true" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
            <DockPanel>
                <ContentPresenter x:Name="Icon" Margin="4,0,6,0" VerticalAlignment="Center" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" ContentSource="Icon"/>
                <Path x:Name="GlyphPanel" Fill="{TemplateBinding Foreground}" FlowDirection="LeftToRight" Margin="4,0,6,0" VerticalAlignment="Center" Visibility="Collapsed" Data="{StaticResource Checkmark}"/>
                <ContentPresenter Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" ContentSource="Header" RecognizesAccessKey="True"/>
                <Popup x:Name="PART_Popup" AllowsTransparency="true" IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" Placement="Bottom" PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}" Focusable="false">
                    <Microsoft_Windows_Themes:SystemDropShadowChrome x:Name="Shdw" Color="Transparent">
                        <Border x:Name="SubMenuBorder" Background="{DynamicResource {x:Static SystemColors.MenuBrushKey}}" BorderBrush="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" BorderThickness="1">
                            <ScrollViewer Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}}" CanContentScroll="true">
                                <ItemsPresenter Margin="2" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Grid.IsSharedSizeScope="true" KeyboardNavigation.DirectionalNavigation="Cycle" KeyboardNavigation.TabNavigation="Cycle"/>
                            </ScrollViewer>
                        </Border>
                    </Microsoft_Windows_Themes:SystemDropShadowChrome>
                </Popup>
            </DockPanel>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsSuspendingPopupAnimation" Value="true">
                <Setter Property="PopupAnimation" TargetName="PART_Popup" Value="None"/>
            </Trigger>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="true">
                <Setter Property="Visibility" TargetName="GlyphPanel" Value="Visible"/>
                <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="true">
                <Setter Property="Margin" TargetName="Shdw" Value="0,0,5,5"/>
                <Setter Property="Color" TargetName="Shdw" Value="#71000000"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="{ComponentResourceKey ResourceId=TopLevelItemTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}" TargetType="{x:Type MenuItem}">
        <Border SnapsToDevicePixels="true" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
            <DockPanel>
                <ContentPresenter x:Name="Icon" Margin="4,0,6,0" VerticalAlignment="Center" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" ContentSource="Icon"/>
                <Path x:Name="GlyphPanel" Fill="{TemplateBinding Foreground}" FlowDirection="LeftToRight" Margin="4,0,6,0" VerticalAlignment="Center" Visibility="Collapsed" Data="{StaticResource Checkmark}"/>
                <ContentPresenter Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" ContentSource="Header" RecognizesAccessKey="True"/>
            </DockPanel>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="true">
                <Setter Property="Visibility" TargetName="GlyphPanel" Value="Visible"/>
                <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Geometry x:Key="RightArrow">M 0,0 L 4,3.5 L 0,7 Z</Geometry>
    <ControlTemplate x:Key="{ComponentResourceKey ResourceId=SubmenuHeaderTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}" TargetType="{x:Type MenuItem}">
        <Border x:Name="border" SnapsToDevicePixels="true" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
            <Grid RenderTransformOrigin="0.5,0.5">
                <Grid.RenderTransform>
                    <TransformGroup>
                        <ScaleTransform ScaleX="-1" ScaleY="1"/>
                        <SkewTransform AngleX="0" AngleY="0"/>
                        <RotateTransform Angle="0"/>
                        <TranslateTransform/>
                    </TransformGroup>
                </Grid.RenderTransform>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition SharedSizeGroup="MenuItemIconColumnGroup" Width="Auto"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition SharedSizeGroup="MenuItemIGTColumnGroup" Width="Auto"/>
                    <ColumnDefinition Width="14"/>
                </Grid.ColumnDefinitions>
                <ContentPresenter x:Name="Icon" Margin="4,0,6,0" VerticalAlignment="Center" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" ContentSource="Icon"/>
                <Path x:Name="GlyphPanel" Fill="{TemplateBinding Foreground}" FlowDirection="LeftToRight" Margin="4,0,6,0" VerticalAlignment="Center" Visibility="Hidden" Data="{StaticResource Checkmark}"/>
                <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Grid.Column="1" ContentSource="Header" RecognizesAccessKey="True" RenderTransformOrigin="0.5,0.5" HorizontalAlignment="Left">
                    <ContentPresenter.RenderTransform>
                        <TransformGroup>
                            <ScaleTransform ScaleX="-1" ScaleY="1"/>
                            <SkewTransform AngleX="0" AngleY="0"/>
                            <RotateTransform Angle="0"/>
                            <TranslateTransform/>
                        </TransformGroup>
                    </ContentPresenter.RenderTransform>
                </ContentPresenter>
                <Path Fill="{TemplateBinding Foreground}" Margin="4,0,6,0" VerticalAlignment="Center" Grid.Column="3" Data="{StaticResource RightArrow}" DockPanel.Dock="Right"/>
                <Popup x:Name="PART_Popup" AllowsTransparency="true" IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" Placement="Left" PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}" Focusable="false" RenderTransformOrigin="0.5,0.5" Margin="0">
                    <Popup.RenderTransform>
                        <TransformGroup>
                            <ScaleTransform ScaleX="1" ScaleY="1"/>
                            <SkewTransform AngleX="0" AngleY="0"/>
                            <RotateTransform Angle="0"/>
                            <TranslateTransform/>
                        </TransformGroup>
                    </Popup.RenderTransform>
                    <Microsoft_Windows_Themes:SystemDropShadowChrome x:Name="Shdw" Color="Transparent">
                        <Border x:Name="SubMenuBorder" Background="{DynamicResource {x:Static SystemColors.MenuBrushKey}}" BorderBrush="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" BorderThickness="1">
                            <ScrollViewer Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}}" CanContentScroll="true">
                                <ItemsPresenter Margin="2" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Grid.IsSharedSizeScope="true" KeyboardNavigation.DirectionalNavigation="Cycle" KeyboardNavigation.TabNavigation="Cycle"/>
                            </ScrollViewer>
                        </Border>
                    </Microsoft_Windows_Themes:SystemDropShadowChrome>
                </Popup>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsSuspendingPopupAnimation" Value="true">
                <Setter Property="PopupAnimation" TargetName="PART_Popup" Value="None"/>
            </Trigger>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="true">
                <Setter Property="Visibility" TargetName="GlyphPanel" Value="Visible"/>
                <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="False">
                <Setter Property="Margin" TargetName="Shdw" Value="0,0,5,5"/>
                <Setter Property="Color" TargetName="Shdw" Value="#71000000"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" TargetName="border" Value="#4CFFFFFF"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style x:Key="ItemsPanelContextMenu" TargetType="{x:Type ContextMenu}">
        <Setter Property="Background" Value="#FF202F36"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="FontFamily" Value="Verdana"/>
        <Setter Property="FontSize" Value="9"/>
    </Style>
    <Style x:Key="MenuItemContextMenu" TargetType="{x:Type MenuItem}">
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Background" Value="#00FFFFFF"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="FontFamily" Value="Verdana"/>
        <Setter Property="FontSize" Value="9"/>
        <Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=SubmenuItemTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}"/>
        <Style.Triggers>
            <Trigger Property="Role" Value="TopLevelHeader">
                <Setter Property="Margin" Value="0,1,0,1"/>
                <Setter Property="Padding" Value="6,3,6,3"/>
                <Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=TopLevelHeaderTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}"/>
            </Trigger>
            <Trigger Property="Role" Value="TopLevelItem">
                <Setter Property="Margin" Value="0,1,0,1"/>
                <Setter Property="Padding" Value="6,3,6,3"/>
                <Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=TopLevelItemTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}"/>
            </Trigger>
            <Trigger Property="Role" Value="SubmenuHeader">
                <Setter Property="DockPanel.Dock" Value="Top"/>
                <Setter Property="Padding" Value="0,2,0,2"/>
                <Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=SubmenuHeaderTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}"/>
            </Trigger>
            <Trigger Property="Role" Value="SubmenuItem">
                <Setter Property="DockPanel.Dock" Value="Top"/>
                <Setter Property="Padding" Value="0,2,0,2"/>
            </Trigger>
            <Trigger Property="IsHighlighted" Value="true">
                <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="komunaMaoExpander" TargetType="{x:Type Expander}">
        <Setter Property="Background" Value="{DynamicResource LightBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Expander}">
                    <Grid RenderTransformOrigin="0.5,0.5">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*" x:Name="ContentRow"/>
                        </Grid.RowDefinitions>
                        <Border Grid.Row="0" x:Name="Border" CornerRadius="1" Height="Auto" BorderThickness="1" BorderBrush="#FF202F36">
                            <Border.Background>
                                <SolidColorBrush Color="#A5516D7A"/>
                            </Border.Background>
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="15           "/>
                                    <ColumnDefinition Width="*"/>
                                </Grid.ColumnDefinitions>
                                <ToggleButton x:Name="toggleButton" Template="{DynamicResource komunaMapInfoExpenderToggleButton}" Background="{DynamicResource NormalBrush}" IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" OverridesDefaultStyle="True" Margin="0"/>
                                <WrapPanel Margin="0" VerticalAlignment="Stretch" Height="15.083" Grid.Column="1" Orientation="Horizontal" d:LayoutOverrides="Width">
                                    <ContentPresenter Margin="0,0,3,0" RecognizesAccessKey="True" ContentSource="Header" HorizontalAlignment="Right" VerticalAlignment="Stretch" RenderTransformOrigin="0.5,0.5">

                                    </ContentPresenter>
                                </WrapPanel>
                            </Grid>
                        </Border>
                        <Border Visibility="Collapsed" Grid.Row="1" x:Name="ExpandSite" BorderThickness="1" CornerRadius="0" Background="{x:Null}" Margin="0" BorderBrush="#FF202F36">
                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Focusable="false"/>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="True">
                            <Setter Property="Visibility" Value="Visible" TargetName="ExpandSite"/>
                            <Setter Property="BorderThickness" TargetName="ExpandSite" Value="1,0,1,1"/>
                            <Setter Property="Grid.ColumnSpan" TargetName="toggleButton" Value="1"/>
                            <Setter Property="Grid.Column" TargetName="toggleButton" Value="0"/>
                            <Setter Property="HorizontalAlignment" TargetName="toggleButton" Value="Stretch"/>
                            <Setter Property="Width" TargetName="toggleButton" Value="Auto"/>
                            <Setter Property="Margin" TargetName="toggleButton" Value="0"/>
                            <Setter Property="BorderThickness" TargetName="Border" Value="1,1,1,0"/>
                            <Setter Property="CornerRadius" TargetName="Border" Value="1,1,0,0"/>
                            <Setter Property="BorderBrush" TargetName="ExpandSite" Value="#FF202F36"/>
                            <Setter Property="CornerRadius" TargetName="ExpandSite" Value="0,0,1,1"/>
                            <Setter Property="Background" TargetName="ExpandSite">
                                <Setter.Value>
                                    <SolidColorBrush Color="#A5516D7A"/>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Background" TargetName="Border">
                                <Setter.Value>
                                    <SolidColorBrush Color="#A5516D7A"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border"/>
                            <Setter Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" TargetName="Border"/>
                            <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="komunaMapInfoExpenderToggleButton" TargetType="{x:Type ToggleButton}">
        <Grid>
            <Rectangle Margin="0,0,0,0" x:Name="Rectangle" Fill="Transparent" Stroke="{x:Null}"/>
            <Rectangle x:Name="rectangle" Fill="White" Margin="7,4" Height="Auto"/>
            <Rectangle Fill="White" Margin="4,7" Height="Auto" RenderTransformOrigin="0.5,0.5">
                <Rectangle.RenderTransform>
                    <TransformGroup>
                        <ScaleTransform/>
                        <SkewTransform/>
                        <RotateTransform Angle="180"/>
                        <TranslateTransform/>
                    </TransformGroup>
                </Rectangle.RenderTransform>
            </Rectangle>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Fill" TargetName="Rectangle" Value="{x:Null}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="true">
                <Setter Property="Fill" TargetName="Rectangle" Value="{x:Null}"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="true">
                <Setter Property="Visibility" TargetName="rectangle" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
                <Setter Property="Stroke" TargetName="Rectangle" Value="{x:Null}"/>
                <Setter Property="Fill" TargetName="Rectangle" Value="{DynamicResource LightBorderBrush}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style x:Key="HomeContentControl" TargetType="{x:Type ContentControl}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContentControl}">
                    <Grid>
                        <Path Stretch="Fill" Stroke="White" VerticalAlignment="Top" Height="5.607" Data="M5.6663333,6.3336667 L11.5,10.941 0.5,10.941 z"/>
                        <Rectangle Stroke="White" VerticalAlignment="Bottom" Height="5.441"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="ComponentResourceKey2" TargetType="{x:Type MenuItem}">
        <Border SnapsToDevicePixels="true" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition SharedSizeGroup="MenuItemIconColumnGroup" MinWidth="17" Width="Auto"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition SharedSizeGroup="MenuItemIGTColumnGroup" Width="Auto"/>
                    <ColumnDefinition Width="14"/>
                </Grid.ColumnDefinitions>
                <ContentPresenter x:Name="Icon" Margin="4,0,6,0" VerticalAlignment="Center" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" ContentSource="Icon"/>
                <Path x:Name="GlyphPanel" Fill="{TemplateBinding Foreground}" FlowDirection="LeftToRight" Margin="4,0,6,0" VerticalAlignment="Center" Visibility="Hidden" Data="{StaticResource Checkmark}"/>
                <ContentPresenter Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Grid.Column="1" ContentSource="Header" RecognizesAccessKey="True"/>
                <TextBlock x:Name="InputGestureText" Margin="5,2,0,2" Grid.Column="2" DockPanel.Dock="Right" Text="{TemplateBinding InputGestureText}"/>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="true">
                <Setter Property="Visibility" TargetName="GlyphPanel" Value="Visible"/>
                <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="ComponentResourceKey3" TargetType="{x:Type MenuItem}">
        <Border SnapsToDevicePixels="true" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition SharedSizeGroup="MenuItemIconColumnGroup" MinWidth="17" Width="Auto"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition SharedSizeGroup="MenuItemIGTColumnGroup" Width="Auto"/>
                    <ColumnDefinition Width="14"/>
                </Grid.ColumnDefinitions>
                <ContentPresenter x:Name="Icon" Margin="4,0,6,0" VerticalAlignment="Center" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" ContentSource="Icon"/>
                <Path x:Name="GlyphPanel" Fill="{TemplateBinding Foreground}" FlowDirection="LeftToRight" Margin="4,0,6,0" VerticalAlignment="Center" Visibility="Hidden" Data="{StaticResource Checkmark}"/>
                <ContentPresenter Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Grid.Column="1" ContentSource="Header" RecognizesAccessKey="True"/>
                <Path Fill="{TemplateBinding Foreground}" Margin="4,0,6,0" VerticalAlignment="Center" Grid.Column="3" Data="{StaticResource RightArrow}" DockPanel.Dock="Right"/>
                <Popup x:Name="PART_Popup" AllowsTransparency="true" IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" Placement="Left" PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}" VerticalOffset="-3" Focusable="false">
                    <Microsoft_Windows_Themes:SystemDropShadowChrome x:Name="Shdw" Color="Transparent">
                        <Border x:Name="SubMenuBorder" Background="{DynamicResource {x:Static SystemColors.MenuBrushKey}}" BorderBrush="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" BorderThickness="1">
                            <ScrollViewer Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}}" CanContentScroll="true">
                                <ItemsPresenter Margin="2" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Grid.IsSharedSizeScope="true" KeyboardNavigation.DirectionalNavigation="Cycle" KeyboardNavigation.TabNavigation="Cycle"/>
                            </ScrollViewer>
                        </Border>
                    </Microsoft_Windows_Themes:SystemDropShadowChrome>
                </Popup>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsSuspendingPopupAnimation" Value="true">
                <Setter Property="PopupAnimation" TargetName="PART_Popup" Value="None"/>
            </Trigger>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="true">
                <Setter Property="Visibility" TargetName="GlyphPanel" Value="Visible"/>
                <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="true">
                <Setter Property="Margin" TargetName="Shdw" Value="0,0,5,5"/>
                <Setter Property="Color" TargetName="Shdw" Value="#71000000"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style x:Key="KomunaSelectMenuItem" TargetType="{x:Type MenuItem}">
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"/>
        <Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=SubmenuItemTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}"/>
        <Style.Triggers>
            <Trigger Property="Role" Value="TopLevelHeader">
                <Setter Property="Margin" Value="0,1,0,1"/>
                <Setter Property="Padding" Value="6,3,6,3"/>
                <Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=TopLevelHeaderTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}"/>
            </Trigger>
            <Trigger Property="Role" Value="TopLevelItem">
                <Setter Property="Margin" Value="0,1,0,1"/>
                <Setter Property="Padding" Value="6,3,6,3"/>
                <Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=TopLevelItemTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}"/>
            </Trigger>
            <Trigger Property="Role" Value="SubmenuHeader">
                <Setter Property="DockPanel.Dock" Value="Top"/>
                <Setter Property="Padding" Value="0,2,0,2"/>
                <Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=SubmenuHeaderTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}"/>
            </Trigger>
            <Trigger Property="Role" Value="SubmenuItem">
                <Setter Property="DockPanel.Dock" Value="Top"/>
                <Setter Property="Padding" Value="0,2,0,2"/>
            </Trigger>
            <Trigger Property="IsHighlighted" Value="true">
                <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="komunaMinimizeToggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="border" BorderThickness="1" CornerRadius="2">
                        <Border.BorderBrush>
                            <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                <GradientStop Color="#004F6772" Offset="1"/>
                                <GradientStop Color="#001B252A"/>
                            </LinearGradientBrush>
                        </Border.BorderBrush>
                        <Grid>
                            <Rectangle Fill="White" HorizontalAlignment="Center" Width="5" VerticalAlignment="Center" Height="1"/>
                            <Rectangle x:Name="rectangle" Fill="White" HorizontalAlignment="Center" Width="5" VerticalAlignment="Center" Height="1" RenderTransformOrigin="0.5,0.5">
                                <Rectangle.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform/>
                                        <SkewTransform/>
                                        <RotateTransform/>
                                        <TranslateTransform/>
                                    </TransformGroup>
                                </Rectangle.RenderTransform>
                            </Rectangle>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" TargetName="border">
                                <Setter.Value>
                                    <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                        <GradientStop Color="#FF4F6772" Offset="1"/>
                                        <GradientStop Color="#FF1B252A"/>
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource gdBorder}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" TargetName="border">
                                <Setter.Value>
                                    <SolidColorBrush Color="{DynamicResource darkBG}"/>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource gdBorder}"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="RenderTransform" TargetName="rectangle">
                                <Setter.Value>
                                    <TransformGroup>
                                        <ScaleTransform/>
                                        <SkewTransform/>
                                        <RotateTransform Angle="-90"/>
                                        <TranslateTransform/>
                                    </TransformGroup>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="KomunaPinToggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="border" BorderThickness="1" CornerRadius="1">
                        <Grid>
                            <Path x:Name="path" Fill="White" Stretch="Fill" HorizontalAlignment="Center" Margin="0" VerticalAlignment="Center" Width="4.582" Height="5.25" Data="M2,0 C3.1045257,0 4,0.61982966 4,2 L2.5,2 2.5,4.5830001 1.5,4.5830001 1.5,2 0,2 C0,0.61981508 0.89542009,0 2,0 z"/>
                            <Ellipse x:Name="ellipse" Fill="White" Margin="1.709,2.667,1.709,2.917" Visibility="Collapsed"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Visibility" TargetName="path" Value="Hidden"/>
                            <Setter Property="Visibility" TargetName="ellipse" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource gdBorder}"/>
                            <Setter Property="BorderThickness" TargetName="border" Value="1"/>
                            <Setter Property="CornerRadius" TargetName="border" Value="1"/>
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource gdBorder}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource gdBorder}"/>
                            <Setter Property="Background" TargetName="border">
                                <Setter.Value>
                                    <SolidColorBrush Color="{DynamicResource darkBG}"/>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Visibility" TargetName="ellipse" Value="Collapsed"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Rect x:Key="Rect1">Empty</Rect>
    <PlacementMode x:Key="PlacementMode1">Left</PlacementMode>

    <!-- Simple MenuItem - The template uses triggers to provide four different arrangements of menu item which are set via the Role property -->
    <Style x:Key="komunaMenuItem2" TargetType="{x:Type MenuItem}">
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type MenuItem}">
                    <Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid>

                            <!-- The Grid is used to hold together columns for an Icon, Content, Glyph checkmark and Arrow to show the next level
							 Size sharing is used in Grid so that the Icon, Content, Arrow for each MenuItem align together -->
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition MinWidth="17" Width="Auto" SharedSizeGroup="MenuItemIconColumnGroup"/>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemIGTColumnGroup"/>
                                <ColumnDefinition Width="11.797"/>
                            </Grid.ColumnDefinitions>

                            <!-- ContentPresenter to show an Icon if needed -->
                            <ContentPresenter Margin="4,0,6,0" x:Name="Icon" VerticalAlignment="Center" ContentSource="Icon" Grid.Column="3"/>

                            <!-- Glyph is a checkmark if needed for a checkable menu -->
                            <Grid Margin="0,2,0,0" x:Name="GlyphPanel" VerticalAlignment="Center" Visibility="Visible" Grid.Column="3" HorizontalAlignment="Center">
                                <Rectangle x:Name="rectangle" Fill="White" VerticalAlignment="Top" Height="3" Width="3" Opacity="0.3"/>
                                <Rectangle x:Name="rectangle_Copy" Fill="White" VerticalAlignment="Top" Width="3" Height="3" Visibility="Collapsed"/>
                            </Grid>

                            <!-- Content for the menu text etc -->
                            <ContentPresenter Grid.Column="1" x:Name="HeaderHost" RecognizesAccessKey="True" ContentSource="Header" HorizontalAlignment="Right"/>

                            <!-- Arrow drawn path which points to the next level of the menu -->
                            <Grid Grid.Column="0" Margin="4,0,6,0" x:Name="ArrowPanel" VerticalAlignment="Center" RenderTransformOrigin="0.5,0.5">
                                <Grid.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform ScaleX="-1" ScaleY="1"/>
                                        <SkewTransform AngleX="0" AngleY="0"/>
                                        <RotateTransform Angle="0"/>
                                        <TranslateTransform/>
                                    </TransformGroup>
                                </Grid.RenderTransform>
                                <Path x:Name="ArrowPanelPath" VerticalAlignment="Center" Fill="{TemplateBinding Foreground}" Data="M0,0 L0,8 L4,4 z"/>
                            </Grid>

                            <!-- The Popup is the body of the menu which expands down or across depending on the level of the item -->
                            <Popup IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" x:Name="SubMenuPopup" Focusable="false" AllowsTransparency="False" PopupAnimation="Fade" Placement="{DynamicResource PlacementMode1}" Panel.ZIndex="0">
                                <Grid x:Name="SubMenu" Margin="0">
                                    <Border x:Name="SubMenuBorder" BorderThickness="0" Background="#FF202F36" CornerRadius="2"/>

                                    <!-- StackPanel holds children of the menu. This is set bu IsItemsHost=True -->
                                    <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle"/>
                                </Grid>
                            </Popup>

                        </Grid>
                    </Border>

                    <!-- These triggers re-configure the four arrangements of MenuItem to show different levels of menu via Role -->
                    <ControlTemplate.Triggers>

                        <!-- Role = TopLevelHeader : this is the root menu item in a menu; the Popup expands down -->
                        <Trigger Property="Role" Value="TopLevelHeader">
                            <Setter Property="Margin" Value="0,1,0,1"/>
                            <Setter Property="Padding" Value="6,3,6,3"/>
                            <Setter Property="Grid.IsSharedSizeScope" Value="true"/>
                            <Setter Property="Placement" Value="Left" TargetName="SubMenuPopup"/>
                            <Setter Property="Grid.Row" TargetName="SubMenuPopup" Value="0"/>
                            <!---<Setter Property="Visibility" Value="Collapsed" TargetName="ArrowPanel"/>-->
                        </Trigger>

                        <!-- Role = TopLevelItem :  this is a child menu item from the top level without any child items-->
                        <Trigger Property="Role" Value="TopLevelItem">
                            <Setter Property="Margin" Value="0,1,0,1"/>
                            <Setter Property="Padding" Value="6,3,6,3"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="ArrowPanel"/>
                        </Trigger>

                        <!-- Role = SubMenuHeader : this is a child menu item which does not have children -->
                        <Trigger Property="Role" Value="SubmenuHeader">
                            <Setter Property="DockPanel.Dock" Value="Top"/>
                            <Setter Property="Padding" Value="0,2,0,2"/>
                            <Setter Property="Grid.IsSharedSizeScope" Value="true"/>
                        </Trigger>

                        <!-- Role = SubMenuItem : this is a child menu item which has children-->
                        <Trigger Property="Role" Value="SubmenuItem">
                            <Setter Property="DockPanel.Dock" Value="Top"/>
                            <Setter Property="Padding" Value="0,2,0,2"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="ArrowPanel"/>
                        </Trigger>
                        <Trigger Property="IsSuspendingPopupAnimation" Value="true">
                            <Setter Property="PopupAnimation" Value="None" TargetName="SubMenuPopup"/>
                            <Setter Property="Placement" Value="Left" TargetName="SubMenuPopup"/>
                        </Trigger>

                        <!-- If no Icon is present the we collapse the Icon Content -->
                        <Trigger Property="Icon" Value="{x:Null}">
                            <Setter Property="Visibility" Value="Collapsed" TargetName="Icon"/>
                        </Trigger>

                        <!-- The GlyphPanel contains the CheckMark -->
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Visibility" Value="Visible" TargetName="GlyphPanel"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="Icon"/>
                            <Setter Property="Opacity" TargetName="rectangle" Value="1"/>
                            <Setter Property="Visibility" TargetName="rectangle_Copy" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="IsCheckable" Value="False">
                            <Setter Property="Visibility" TargetName="GlyphPanel" Value="Hidden"/>
                        </Trigger>

                        <Trigger Property="AllowsTransparency" SourceName="SubMenuPopup" Value="true">
                            <Setter Property="Margin" Value="0,0,3,3" TargetName="SubMenu"/>
                            <Setter Property="SnapsToDevicePixels" Value="true" TargetName="SubMenu"/>
                            <Setter Property="BitmapEffect" Value="{DynamicResource PopupDropShadow}" TargetName="SubMenuBorder"/>
                        </Trigger>

                        <!-- Using the system colors for the Menu Highlight and IsEnabled-->
                        <Trigger Property="IsHighlighted" Value="true">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
                            <Setter Property="Background" TargetName="Border" Value="#19FFFFFF"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Simple MenuItem - The template uses triggers to provide four different arrangements of menu item which are set via the Role property -->
    <Style x:Key="komunaMenuItemEn" TargetType="{x:Type MenuItem}">

        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type MenuItem}">
                    <Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid>

                            <!-- The Grid is used to hold together columns for an Icon, Content, Glyph checkmark and Arrow to show the next level
							 Size sharing is used in Grid so that the Icon, Content, Arrow for each MenuItem align together -->
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition MinWidth="17" Width="Auto" />
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="0"/>
                            </Grid.ColumnDefinitions>

                            <!-- ContentPresenter to show an Icon if needed -->
                            <ContentPresenter Margin="4,0,6,0" x:Name="Icon" VerticalAlignment="Center" ContentSource="Icon" Grid.Column="3"/>

                            <!-- Glyph is a checkmark if needed for a checkable menu -->
                            <Grid Margin="0,2,0,0" x:Name="GlyphPanel" VerticalAlignment="Center" HorizontalAlignment="Left" Visibility="Visible" Grid.Column="3" >
                                <Rectangle x:Name="rectangle" Fill="White" VerticalAlignment="Top" Height="3" Width="3" Opacity="0.3"/>
                                <Rectangle x:Name="rectangle_Copy" Fill="White" VerticalAlignment="Top" Width="3" Height="3" Visibility="Collapsed"/>
                            </Grid>

                            <!-- Content for the menu text etc -->
                            <ContentPresenter Grid.Column="1" x:Name="HeaderHost" RecognizesAccessKey="True" ContentSource="Header" HorizontalAlignment="Left"/>

                            <!-- Arrow drawn path which points to the next level of the menu -->
                            <Grid Grid.Column="0" Margin="4,0,6,0" x:Name="ArrowPanel" VerticalAlignment="Center" RenderTransformOrigin="0.5,0.5">

                                <Path x:Name="ArrowPanelPath" VerticalAlignment="Center" Fill="{TemplateBinding Foreground}" Data="M0,0 L0,8 L4,4 z"/>
                            </Grid>

                            <!-- The Popup is the body of the menu which expands down or across depending on the level of the item -->
                            <Popup IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" x:Name="SubMenuPopup" Focusable="false" AllowsTransparency="False" PopupAnimation="Fade" Placement="{DynamicResource PlacementMode1}" Panel.ZIndex="0">
                                <Grid x:Name="SubMenu" Margin="0">
                                    <Border x:Name="SubMenuBorder" BorderThickness="0" Background="#FF202F36" CornerRadius="2"/>

                                    <!-- StackPanel holds children of the menu. This is set bu IsItemsHost=True -->
                                    <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle"/>
                                </Grid>
                            </Popup>

                        </Grid>
                    </Border>

                    <!-- These triggers re-configure the four arrangements of MenuItem to show different levels of menu via Role -->
                    <ControlTemplate.Triggers>



                        <!-- If no Icon is present the we collapse the Icon Content -->
                        <Trigger Property="Icon" Value="{x:Null}">
                            <Setter Property="Visibility" Value="Collapsed" TargetName="Icon"/>
                        </Trigger>

                        <!-- The GlyphPanel contains the CheckMark -->
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Visibility" Value="Visible" TargetName="GlyphPanel"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="Icon"/>
                            <Setter Property="Opacity" TargetName="rectangle" Value="1"/>
                            <Setter Property="Visibility" TargetName="rectangle_Copy" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="IsCheckable" Value="False">
                            <Setter Property="Visibility" TargetName="GlyphPanel" Value="Hidden"/>
                        </Trigger>

                        <Trigger Property="AllowsTransparency" SourceName="SubMenuPopup" Value="true">
                            <Setter Property="Margin" Value="0,0,3,3" TargetName="SubMenu"/>
                            <Setter Property="SnapsToDevicePixels" Value="true" TargetName="SubMenu"/>
                            <Setter Property="BitmapEffect" Value="{DynamicResource PopupDropShadow}" TargetName="SubMenuBorder"/>
                        </Trigger>

                        <!-- Using the system colors for the Menu Highlight and IsEnabled-->
                        <Trigger Property="IsHighlighted" Value="true">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
                            <Setter Property="Background" TargetName="Border" Value="#19FFFFFF"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Storyboard x:Key="ToolsOut">
        <ObjectAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="border" Storyboard.TargetProperty="(UIElement.Visibility)">
            <DiscreteObjectKeyFrame KeyTime="00:00:00.2000000" Value="{x:Static Visibility.Collapsed}"/>
        </ObjectAnimationUsingKeyFrames>
    </Storyboard>
    <Storyboard x:Key="ToolsIn">
        <ObjectAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="border" Storyboard.TargetProperty="(UIElement.Visibility)">
            <DiscreteObjectKeyFrame KeyTime="00:00:00.1000000" Value="{x:Static Visibility.Visible}"/>
        </ObjectAnimationUsingKeyFrames>
    </Storyboard>
    <Storyboard x:Key="layersOut">
        <ObjectAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="border1" Storyboard.TargetProperty="(UIElement.Visibility)">
            <DiscreteObjectKeyFrame KeyTime="00:00:00.1000000" Value="{x:Static Visibility.Collapsed}"/>
        </ObjectAnimationUsingKeyFrames>
    </Storyboard>
    <Storyboard x:Key="layersIn">
        <ObjectAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="border1" Storyboard.TargetProperty="(UIElement.Visibility)">
            <DiscreteObjectKeyFrame KeyTime="00:00:00.1000000" Value="{x:Static Visibility.Visible}"/>
        </ObjectAnimationUsingKeyFrames>
    </Storyboard>

    <Color x:Key="greenDown">#FF0DFF60</Color>

    <Style x:Key="tool" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid HorizontalAlignment="Stretch" Margin="0" VerticalAlignment="Stretch" Width="Auto" Height="Auto">
                        <Path Stretch="Fill" Stroke="#FF202F36" HorizontalAlignment="Left" Margin="3.696,5.478,0,0" VerticalAlignment="Top" Width="4" Height="8.961" Data="M5.6234223,4.1239222 L5.6234223,12.328423 2.6234223,12.328423 2.6234223,4.1239222 z" StrokeDashCap="Round" StrokeEndLineCap="Round" StrokeLineJoin="Round">
                            <Path.Fill>
                                <SolidColorBrush Color="{DynamicResource greenDown}"/>
                            </Path.Fill>
                        </Path>
                        <Rectangle Stroke="#FF202F36" HorizontalAlignment="Left" Margin="3.696,0,0,6.132" VerticalAlignment="Bottom" Width="4" Height="6.417">
                            <Rectangle.Fill>
                                <SolidColorBrush Color="{DynamicResource greenDown}"/>
                            </Rectangle.Fill>
                        </Rectangle>
                        <Rectangle Stroke="#FF202F36" HorizontalAlignment="Right" Margin="0,0,4.847,6.132" VerticalAlignment="Bottom" Width="4" Height="6.417">
                            <Rectangle.Fill>
                                <SolidColorBrush Color="{DynamicResource greenDown}"/>
                            </Rectangle.Fill>
                        </Rectangle>
                        <Path Stretch="Fill" Stroke="#FF202F36" StrokeDashCap="Round" StrokeLineJoin="Round" HorizontalAlignment="Right" Margin="0,-0.209,2.048,0" VerticalAlignment="Top" Width="8.923" Height="8.688" RenderTransformOrigin="0.293765788841751,0.706214276286326" Data="M7.8036509,0.5 L9.9249716,2.6213204 4.1235137,8.4227779 2.0021935,6.3014576 z">
                            <Path.Fill>
                                <SolidColorBrush Color="{DynamicResource greenDown}"/>
                            </Path.Fill>
                            <Path.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform ScaleX="0.98652743116730546" ScaleY="1.0136565577469581"/>
                                    <SkewTransform AngleX="0" AngleY="1.5336260277815086"/>
                                    <RotateTransform Angle="134.23318698610925"/>
                                    <TranslateTransform X="1.5027900589619314" Y="1.4975792335900593"/>
                                </TransformGroup>
                            </Path.RenderTransform>
                        </Path>
                        <Path Stretch="Fill" Stroke="#FF202F36" StrokeThickness="1" Margin="1.87,9.921,2.613,8" Data="M10.206,12.230821 L6.2298312,16.206989 6.3179045,16.261972 C7.1138686,16.745618 8.0104774,17.080099 8.9690609,17.226587 9.44834,17.299814 9.9504698,17.325592 10.443992,17.300581 11.431016,17.250531 12.365851,17.002811 13.209688,16.596205 13.42066,16.494549 13.625941,16.38296 13.824924,16.262058 13.874672,16.231831 13.924026,16.201021 13.972978,16.169638 L14.076607,16.101427 z M16.206989,6.2298317 L12.327321,10.1095 16.177771,13.959949 16.262058,13.824924 C16.745649,13.029016 17.080103,12.132396 17.226597,11.173852 17.29981,10.694593 17.325602,10.192482 17.300579,9.6989746 17.250561,8.711902 17.002782,7.7770109 16.596142,6.933145 16.49448,6.7221756 16.382885,6.5168971 16.261972,6.3179045 z M4.0415645,6.0663853 L3.9733541,6.1700153 C3.4712157,6.9532431 3.1158466,7.8395931 2.9460535,8.790163 2.8611523,9.2654738 2.8227815,9.7616309 2.8353634,10.258312 2.8605254,11.251593 3.0857931,12.195182 3.4723608,13.050249 3.5690044,13.264017 3.6757299,13.472254 3.7919302,13.674349 3.8500309,13.775398 3.9105,13.87491 3.9732628,13.972815 4.0046439,14.021766 4.0365982,14.070315 4.0691166,14.118452 L4.0718236,14.122356 8.0846796,10.1095 z M10.0715,2.8330002 C9.0721138,2.8329964 8.1199794,3.0355298 7.2539439,3.40183 7.0374454,3.4934014 6.826326,3.5952062 6.6211948,3.70664 6.5186299,3.7623561 6.4175619,3.8204795 6.318068,3.8809338 L6.1830425,3.9652221 10.206,7.9881797 14.122356,4.0718231 14.118452,4.0691166 C13.348268,3.5488245 12.472587,3.1728695 11.530204,2.980041 11.059014,2.8836271 10.571162,2.8329983 10.0715,2.8330002 z M10.0715,0.5 C15.357598,0.5 19.643,4.7855719 19.643,10.0715 19.643,15.357665 15.357665,19.643 10.0715,19.643 4.7855719,19.643 0.5,15.357598 0.5,10.0715 0.5,4.7856448 4.7856448,0.5 10.0715,0.5 z" RenderTransformOrigin="0.5,0.5">
                            <Path.Fill>
                                <SolidColorBrush Color="{DynamicResource greenDown}"/>
                            </Path.Fill>
                            <Path.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform/>
                                    <SkewTransform/>
                                    <RotateTransform Angle="-45"/>
                                    <TranslateTransform/>
                                </TransformGroup>
                            </Path.RenderTransform>
                        </Path>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True"/>
                        <Trigger Property="IsDefaulted" Value="True"/>
                        <Trigger Property="IsMouseOver" Value="True"/>
                        <Trigger Property="IsPressed" Value="True"/>
                        <Trigger Property="IsEnabled" Value="False"/>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Storyboard x:Key="open">
        <ObjectAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="tool1" Storyboard.TargetProperty="(UIElement.Visibility)">
            <DiscreteObjectKeyFrame KeyTime="00:00:00.1000000" Value="{x:Static Visibility.Visible}"/>
        </ObjectAnimationUsingKeyFrames>
    </Storyboard>

    <Storyboard x:Key="close">
        <ObjectAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="tool1" Storyboard.TargetProperty="(UIElement.Visibility)">
            <DiscreteObjectKeyFrame KeyTime="00:00:00.1000000" Value="{x:Static Visibility.Collapsed}"/>
        </ObjectAnimationUsingKeyFrames>
    </Storyboard>

    <Style x:Key="try2" TargetType="{x:Type MenuItem}">
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type MenuItem}">
                    <Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid>

                            <!-- The Grid is used to hold together columns for an Icon, Content, Glyph checkmark and Arrow to show the next level
							 Size sharing is used in Grid so that the Icon, Content, Arrow for each MenuItem align together -->
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition MinWidth="17" Width="Auto" SharedSizeGroup="MenuItemIconColumnGroup"/>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemIGTColumnGroup"/>
                                <ColumnDefinition Width="14"/>
                            </Grid.ColumnDefinitions>

                            <!-- ContentPresenter to show an Icon if needed -->
                            <ContentPresenter Margin="4,0,6,0" x:Name="Icon" VerticalAlignment="Center" ContentSource="Icon"/>

                            <!-- Glyph is a checkmark if needed for a checkable menu -->
                            <Grid Visibility="Hidden" Margin="4,0,6,0" x:Name="GlyphPanel" VerticalAlignment="Center">
                                <Path x:Name="GlyphPanelpath" VerticalAlignment="Center" Fill="{TemplateBinding Foreground}" Data="M0,2 L0,4.8 L2.5,7.4 L7.1,2.8 L7.1,0 L2.5,4.6 z" FlowDirection="LeftToRight"/>
                            </Grid>

                            <!-- Content for the menu text etc -->
                            <ContentPresenter Grid.Column="1" Margin="{TemplateBinding Padding}" x:Name="HeaderHost" RecognizesAccessKey="True" ContentSource="Header"/>

                            <!-- Arrow drawn path which points to the next level of the menu -->
                            <Grid Grid.Column="3" Margin="4,0,6,0" x:Name="ArrowPanel" VerticalAlignment="Center">
                                <Path x:Name="ArrowPanelPath" VerticalAlignment="Center" Fill="{TemplateBinding Foreground}" Data="M0,0 L0,8 L4,4 z"/>
                            </Grid>

                            <!-- The Popup is the body of the menu which expands down or across depending on the level of the item -->
                            <Popup IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" Placement="Right" x:Name="SubMenuPopup" Focusable="false" AllowsTransparency="true" PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}" VerticalOffset="-3">
                                <Grid x:Name="SubMenu">
                                    <Border x:Name="SubMenuBorder" Background="{DynamicResource WindowBackgroundBrush}" BorderBrush="{DynamicResource SolidBorderBrush}" BorderThickness="1"/>

                                    <!-- StackPanel holds children of the menu. This is set bu IsItemsHost=True -->
                                    <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle"/>
                                </Grid>
                            </Popup>

                        </Grid>
                    </Border>

                    <!-- These triggers re-configure the four arrangements of MenuItem to show different levels of menu via Role -->
                    <ControlTemplate.Triggers>

                        <!-- Role = TopLevelHeader : this is the root menu item in a menu; the Popup expands down -->
                        <Trigger Property="Role" Value="TopLevelHeader">
                            <Setter Property="Margin" Value="0,1,0,1"/>
                            <Setter Property="Padding" Value="6,3,6,3"/>
                            <Setter Property="Grid.IsSharedSizeScope" Value="true"/>
                            <Setter Property="Placement" Value="Bottom" TargetName="SubMenuPopup"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="ArrowPanel"/>
                        </Trigger>

                        <!-- Role = TopLevelItem :  this is a child menu item from the top level without any child items-->
                        <Trigger Property="Role" Value="TopLevelItem">
                            <Setter Property="Margin" Value="0,1,0,1"/>
                            <Setter Property="Padding" Value="6,3,6,3"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="ArrowPanel"/>
                        </Trigger>

                        <!-- Role = SubMenuHeader : this is a child menu item which does not have children -->
                        <Trigger Property="Role" Value="SubmenuHeader">
                            <Setter Property="DockPanel.Dock" Value="Top"/>
                            <Setter Property="Padding" Value="0,2,0,2"/>
                            <Setter Property="Grid.IsSharedSizeScope" Value="true"/>
                        </Trigger>

                        <!-- Role = SubMenuItem : this is a child menu item which has children-->
                        <Trigger Property="Role" Value="SubmenuItem">
                            <Setter Property="DockPanel.Dock" Value="Top"/>
                            <Setter Property="Padding" Value="0,2,0,2"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="ArrowPanel"/>
                        </Trigger>
                        <Trigger Property="IsSuspendingPopupAnimation" Value="true">
                            <Setter Property="PopupAnimation" Value="None" TargetName="SubMenuPopup"/>
                        </Trigger>

                        <!-- If no Icon is present the we collapse the Icon Content -->
                        <Trigger Property="Icon" Value="{x:Null}">
                            <Setter Property="Visibility" Value="Collapsed" TargetName="Icon"/>
                        </Trigger>

                        <!-- The GlyphPanel contains the CheckMark -->
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Visibility" Value="Visible" TargetName="GlyphPanel"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="Icon"/>
                        </Trigger>

                        <Trigger Property="AllowsTransparency" SourceName="SubMenuPopup" Value="true">
                            <Setter Property="Margin" Value="0,0,3,3" TargetName="SubMenu"/>
                            <Setter Property="SnapsToDevicePixels" Value="true" TargetName="SubMenu"/>
                            <Setter Property="BitmapEffect" Value="{DynamicResource PopupDropShadow}" TargetName="SubMenuBorder"/>
                        </Trigger>

                        <!-- Using the system colors for the Menu Highlight and IsEnabled-->
                        <Trigger Property="IsHighlighted" Value="true">
                            <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" TargetName="Border"/>
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="btmMission" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid x:Name="bottomLevelMission">
                        <Path x:Name="path" Stretch="Fill" StrokeEndLineCap="Round" StrokeLineJoin="Round" StrokeStartLineCap="Round" Margin="4,3.251,1.5,3.666" Data="M1683,331.5 L1402,503.5 1118.5,482.5 865,316 634,380.5 514,326.5" StrokeThickness="3">
                            <Path.Stroke>
                                <SolidColorBrush Color="{DynamicResource greenDown}"/>
                            </Path.Stroke>
                        </Path>
                        <Ellipse StrokeEndLineCap="Round" StrokeLineJoin="Round" StrokeStartLineCap="Round" StrokeThickness="5" HorizontalAlignment="Right" Margin="0,0,220.833,0" VerticalAlignment="Bottom" Width="12" Height="12">
                            <Ellipse.Fill>
                                <SolidColorBrush Color="{DynamicResource greenDown}"/>
                            </Ellipse.Fill>
                        </Ellipse>
                        <Ellipse StrokeEndLineCap="Round" StrokeLineJoin="Round" StrokeStartLineCap="Round" StrokeThickness="5" HorizontalAlignment="Right" Margin="0,17.167,1,0" VerticalAlignment="Top" Width="12" Height="12">
                            <Ellipse.Fill>
                                <SolidColorBrush Color="{DynamicResource greenDown}"/>
                            </Ellipse.Fill>
                        </Ellipse>
                        <Ellipse StrokeEndLineCap="Round" StrokeLineJoin="Round" StrokeStartLineCap="Round" StrokeThickness="5" HorizontalAlignment="Right" Margin="0,0,444.333,20" VerticalAlignment="Bottom" Width="12" Height="12" d:LayoutOverrides="HorizontalAlignment">
                            <Ellipse.Fill>
                                <SolidColorBrush Color="{DynamicResource greenDown}"/>
                            </Ellipse.Fill>
                        </Ellipse>
                        <Ellipse StrokeEndLineCap="Round" StrokeLineJoin="Round" StrokeStartLineCap="Round" StrokeThickness="5" HorizontalAlignment="Left" Margin="278.25,-0.5,0,0" VerticalAlignment="Top" Width="12" Height="12">
                            <Ellipse.Fill>
                                <SolidColorBrush Color="{DynamicResource greenDown}"/>
                            </Ellipse.Fill>
                        </Ellipse>
                        <Ellipse StrokeEndLineCap="Round" StrokeLineJoin="Round" StrokeStartLineCap="Round" StrokeThickness="5" HorizontalAlignment="Left" Margin="94.875,63,0,0" VerticalAlignment="Top" Width="12" Height="12">
                            <Ellipse.Fill>
                                <SolidColorBrush Color="{DynamicResource greenDown}"/>
                            </Ellipse.Fill>
                        </Ellipse>
                        <Ellipse StrokeEndLineCap="Round" StrokeLineJoin="Round" StrokeStartLineCap="Round" StrokeThickness="5" HorizontalAlignment="Left" Margin="0,9.875,0,0" VerticalAlignment="Top" Width="12" Height="12">
                            <Ellipse.Fill>
                                <SolidColorBrush Color="{DynamicResource greenDown}"/>
                            </Ellipse.Fill>
                        </Ellipse>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True"/>
                        <Trigger Property="IsDefaulted" Value="True"/>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="StrokeThickness" TargetName="path" Value="5"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True"/>
                        <Trigger Property="IsEnabled" Value="False"/>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Storyboard x:Key="BTMMissionIn">
        <ObjectAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="mission1" Storyboard.TargetProperty="(UIElement.Visibility)">
            <DiscreteObjectKeyFrame KeyTime="00:00:00.1000000" Value="{x:Static Visibility.Visible}"/>
        </ObjectAnimationUsingKeyFrames>
    </Storyboard>
    <Storyboard x:Key="BTMMissionOut">
        <ObjectAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="mission1" Storyboard.TargetProperty="(UIElement.Visibility)">
            <DiscreteObjectKeyFrame KeyTime="00:00:00.1000000" Value="{x:Static Visibility.Collapsed}"/>
        </ObjectAnimationUsingKeyFrames>
    </Storyboard>
    <Style x:Key="MDLMissionIn" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid x:Name="middleLevelMission">
                        <Path x:Name="path" Stretch="Fill" Stroke="#FF07E1E9" StrokeEndLineCap="Round" StrokeLineJoin="Round" StrokeStartLineCap="Round" StrokeThickness="3" Margin="5.458,3.084,4.042,2.666" Data="M1503,676.5 L1236,775.75 959.75,659.75 842.5,494.5 570.91667,507.16667 360.5,580.75 280,662.5"/>
                        <Ellipse StrokeEndLineCap="Round" StrokeLineJoin="Round" StrokeStartLineCap="Round" StrokeThickness="5" HorizontalAlignment="Right" Margin="0,0,0,44.334" Width="12" Fill="#FF07E1E9" VerticalAlignment="Bottom" Height="12" d:LayoutOverrides="VerticalAlignment"/>
                        <Ellipse StrokeEndLineCap="Round" StrokeLineJoin="Round" StrokeStartLineCap="Round" StrokeThickness="5" HorizontalAlignment="Right" Margin="0,0,216.5,-2.668" Width="12" Fill="#FF07E1E9" VerticalAlignment="Bottom" Height="12"/>
                        <Ellipse StrokeEndLineCap="Round" StrokeLineJoin="Round" StrokeStartLineCap="Round" StrokeThickness="5" Margin="0,0,532.5,130" Fill="#FF07E1E9" VerticalAlignment="Bottom" Height="12" HorizontalAlignment="Right" Width="12" RenderTransformOrigin="1.528,-0.917"/>
                        <Ellipse StrokeEndLineCap="Round" StrokeLineJoin="Round" StrokeStartLineCap="Round" StrokeThickness="5" Margin="546.999,0,0,53.332" Fill="#FF07E1E9" VerticalAlignment="Bottom" Height="12" HorizontalAlignment="Left" Width="12"/>
                        <Ellipse StrokeEndLineCap="Round" StrokeLineJoin="Round" StrokeStartLineCap="Round" StrokeThickness="5" Margin="234.5,5.082,0,0" Fill="#FF07E1E9" VerticalAlignment="Top" Height="12" HorizontalAlignment="Left" Width="12"/>
                        <Ellipse StrokeEndLineCap="Round" StrokeLineJoin="Round" StrokeStartLineCap="Round" StrokeThickness="5" Margin="65.167,40.333,0,0" Fill="#FF07E1E9" VerticalAlignment="Top" Height="12" HorizontalAlignment="Left" Width="12" d:LayoutOverrides="VerticalAlignment"/>
                        <Ellipse StrokeEndLineCap="Round" StrokeLineJoin="Round" StrokeStartLineCap="Round" StrokeThickness="5" Margin="0,0,0,50.001" Fill="#FF07E1E9" VerticalAlignment="Bottom" Height="12" HorizontalAlignment="Left" Width="12" d:LayoutOverrides="VerticalAlignment"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True"/>
                        <Trigger Property="IsDefaulted" Value="True"/>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="StrokeThickness" TargetName="path" Value="5"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True"/>
                        <Trigger Property="IsEnabled" Value="False"/>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Storyboard x:Key="MDLMissionOpen">
        <ObjectAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="mission3" Storyboard.TargetProperty="(UIElement.Visibility)">
            <DiscreteObjectKeyFrame KeyTime="00:00:00.1000000" Value="{x:Static Visibility.Visible}"/>
        </ObjectAnimationUsingKeyFrames>
    </Storyboard>
    <Storyboard x:Key="MDLMissionClose">
        <ObjectAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="mission3" Storyboard.TargetProperty="(UIElement.Visibility)">
            <DiscreteObjectKeyFrame KeyTime="00:00:00.1000000" Value="{x:Static Visibility.Collapsed}"/>
        </ObjectAnimationUsingKeyFrames>
    </Storyboard>
    <Style x:Key="TOPMission" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid x:Name="topLayerMission">
                        <Path x:Name="path" Stretch="Fill" Stroke="#FF00A5FF" StrokeEndLineCap="Round" StrokeLineJoin="Round" StrokeStartLineCap="Round" StrokeThickness="3" Margin="5.25,5.167,2.417,2.499" Data="M1311,619.5 L1207,413.5 977.5,308.5 739,227.5"/>
                        <Ellipse Fill="#FF00A5FF" StrokeEndLineCap="Round" StrokeLineJoin="Round" StrokeStartLineCap="Round" StrokeThickness="5" HorizontalAlignment="Left" VerticalAlignment="Top" Width="12" Height="12"/>
                        <Ellipse Fill="#FF00A5FF" StrokeEndLineCap="Round" StrokeLineJoin="Round" StrokeStartLineCap="Round" StrokeThickness="5" HorizontalAlignment="Left" Margin="141.667,51.166,0,0" VerticalAlignment="Top" Width="12" Height="12" d:LayoutOverrides="HorizontalAlignment"/>
                        <Ellipse Fill="#FF00A5FF" StrokeEndLineCap="Round" StrokeLineJoin="Round" StrokeStartLineCap="Round" StrokeThickness="5" HorizontalAlignment="Right" Margin="0,116.499,58.167,0" VerticalAlignment="Top" Width="12" Height="12"/>
                        <Ellipse Fill="#FF00A5FF" StrokeEndLineCap="Round" StrokeLineJoin="Round" StrokeStartLineCap="Round" StrokeThickness="5" HorizontalAlignment="Right" VerticalAlignment="Bottom" Width="12" Height="12"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True"/>
                        <Trigger Property="IsDefaulted" Value="True"/>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="StrokeThickness" TargetName="path" Value="5"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True"/>
                        <Trigger Property="IsEnabled" Value="False"/>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Storyboard x:Key="TOPMissionIn">
        <ObjectAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="mission2" Storyboard.TargetProperty="(UIElement.Visibility)">
            <DiscreteObjectKeyFrame KeyTime="00:00:00.1000000" Value="{x:Static Visibility.Visible}"/>
        </ObjectAnimationUsingKeyFrames>
    </Storyboard>
    <Storyboard x:Key="TOPMissionOut">
        <ObjectAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="mission2" Storyboard.TargetProperty="(UIElement.Visibility)">
            <DiscreteObjectKeyFrame KeyTime="00:00:00.1000000" Value="{x:Static Visibility.Collapsed}"/>
        </ObjectAnimationUsingKeyFrames>
    </Storyboard>
    <Style x:Key="komunaMapMenu" TargetType="{x:Type Menu}">
        <Setter Property="Background" Value="{DynamicResource LightBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Menu}">
                    <Grid>
                        <Border Margin="1" x:Name="Border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"/>
                        <StackPanel IsItemsHost="True" ClipToBounds="True"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False"/>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="komunaMapMenuEn" TargetType="{x:Type Menu}">
        <Setter Property="Background" Value="{DynamicResource LightBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Menu}">
                    <Grid>
                        <Border Margin="1" x:Name="Border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"/>
                        <StackPanel IsItemsHost="True" ClipToBounds="True" Orientation="Horizontal"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False"/>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="LOS" TargetType="{x:Type CheckBox}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <Grid x:Name="zoomAll_Copy6">
                        <Rectangle x:Name="rectangle" Fill="#FF121A1E" RadiusX="2" RadiusY="2" Opacity="0">
                            <Rectangle.Stroke>
                                <LinearGradientBrush EndPoint="0.248,0.068" StartPoint="0.752,0.932">
                                    <GradientStop Color="Black" Offset="1"/>
                                    <GradientStop Color="#FF3B4B53"/>
                                </LinearGradientBrush>
                            </Rectangle.Stroke>
                        </Rectangle>
                        <Path Stretch="Fill" Stroke="White" VerticalAlignment="Top" Height="15.967" Data="M15.5,13.793144 C15.5,14.735746 14.750933,15.499876 13.826912,15.499876 13.826912,15.499876 2.9487255,15.515584 2.1730882,15.499876 1.2490671,15.499876 0.5,14.735746 0.5,13.793144 0.5,13.793144 0.5,3.0182376 0.5,2.2538563 0.5,1.3112539 1.2490671,0.54712357 2.1730882,0.54712357 2.1730882,0.54712357 13.051275,0.53141579 13.826912,0.54712365 14.750933,0.54712365 15.5,1.3112539 15.5,2.2538564 z" RenderTransformOrigin="0.84375,0.84274320308268" Margin="4,-7,4,0">
                            <Path.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform ScaleX="1" ScaleY="-1"/>
                                    <SkewTransform AngleX="0" AngleY="0"/>
                                    <RotateTransform Angle="0"/>
                                    <TranslateTransform Y="0.13483891249322255"/>
                                </TransformGroup>
                            </Path.RenderTransform>
                        </Path>
                        <Path Stretch="Fill" Stroke="White" VerticalAlignment="Top" Height="7.465" Data="M15.5,7.005542 C15.5,7.005542 0.5,3.2554764 0.5,3.2554764 0.5,3.2554764 0.5,3.0182376 0.5,2.2538563 0.5,1.3112539 1.2490671,0.54712357 2.1730882,0.54712357 2.1730882,0.54712357 13.051275,0.53141579 13.826912,0.54712365 14.750933,0.54712365 15.5,1.3112539 15.5,2.2538564 15.5,6.1002856 15.5,7.005542 15.5,7.005542 z" RenderTransformOrigin="0.84375,0.84274320308268" Margin="4,-7,4,0" Fill="White">
                            <Path.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform ScaleX="1" ScaleY="-1"/>
                                    <SkewTransform AngleX="0" AngleY="0"/>
                                    <RotateTransform Angle="0"/>
                                    <TranslateTransform Y="14.464844337711121"/>
                                </TransformGroup>
                            </Path.RenderTransform>
                        </Path>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Stroke" TargetName="rectangle">
                                <Setter.Value>
                                    <LinearGradientBrush EndPoint="0.248,0.068" StartPoint="0.752,0.932">
                                        <GradientStop Color="Black" Offset="1"/>
                                        <GradientStop Color="#FF4B5F68"/>
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Fill" TargetName="rectangle" Value="#4C121A1E"/>
                            <Setter Property="Opacity" TargetName="rectangle" Value="1"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Fill" TargetName="rectangle" Value="#FF131718"/>
                            <Setter Property="Stroke" TargetName="rectangle">
                                <Setter.Value>
                                    <LinearGradientBrush EndPoint="0.248,0.068" StartPoint="0.752,0.932">
                                        <GradientStop Color="Black" Offset="1"/>
                                        <GradientStop Color="#FF576D78"/>
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Opacity" TargetName="rectangle" Value="1"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="OrianMap" TargetType="{x:Type CheckBox}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <Grid x:Name="zoomAll_Copy6">
                        <Rectangle x:Name="rectangle" Fill="#FF121A1E" RadiusX="2" RadiusY="2" Opacity="0">
                            <Rectangle.Stroke>
                                <LinearGradientBrush EndPoint="0.248,0.068" StartPoint="0.752,0.932">
                                    <GradientStop Color="Black" Offset="1"/>
                                    <GradientStop Color="#FF3B4B53"/>
                                </LinearGradientBrush>
                            </Rectangle.Stroke>
                        </Rectangle>
                        <Path Stretch="Fill" Stroke="White" VerticalAlignment="Top" Height="15.967" Data="M15.5,13.793144 C15.5,14.735746 14.750933,15.499876 13.826912,15.499876 13.826912,15.499876 2.9487255,15.515584 2.1730882,15.499876 1.2490671,15.499876 0.5,14.735746 0.5,13.793144 0.5,13.793144 0.5,3.0182376 0.5,2.2538563 0.5,1.3112539 1.2490671,0.54712357 2.1730882,0.54712357 2.1730882,0.54712357 13.051275,0.53141579 13.826912,0.54712365 14.750933,0.54712365 15.5,1.3112539 15.5,2.2538564 z" RenderTransformOrigin="0.84375,0.84274320308268" Margin="4,-7,4,0">
                            <Path.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform ScaleX="1" ScaleY="-1"/>
                                    <SkewTransform AngleX="0" AngleY="0"/>
                                    <RotateTransform Angle="0"/>
                                    <TranslateTransform Y="0.13483891249322255"/>
                                </TransformGroup>
                            </Path.RenderTransform>
                        </Path>
                        <Rectangle Fill="White" Stroke="White" StrokeLineJoin="Round" HorizontalAlignment="Right" Margin="0,0,6.497,6.271" VerticalAlignment="Bottom" Width="4.437" Height="3.813"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Stroke" TargetName="rectangle">
                                <Setter.Value>
                                    <LinearGradientBrush EndPoint="0.248,0.068" StartPoint="0.752,0.932">
                                        <GradientStop Color="Black" Offset="1"/>
                                        <GradientStop Color="#FF4B5F68"/>
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Fill" TargetName="rectangle" Value="#4C121A1E"/>
                            <Setter Property="Opacity" TargetName="rectangle" Value="1"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Fill" TargetName="rectangle" Value="#FF131718"/>
                            <Setter Property="Stroke" TargetName="rectangle">
                                <Setter.Value>
                                    <LinearGradientBrush EndPoint="0.248,0.068" StartPoint="0.752,0.932">
                                        <GradientStop Color="Black" Offset="1"/>
                                        <GradientStop Color="#FF576D78"/>
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Opacity" TargetName="rectangle" Value="1"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="RasterOnMap" TargetType="{x:Type CheckBox}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <Grid x:Name="zoomAll_Copy6">
                        <Rectangle x:Name="rectangle" Fill="#FF121A1E" RadiusX="2" RadiusY="2" Opacity="0">
                            <Rectangle.Stroke>
                                <LinearGradientBrush EndPoint="0.248,0.068" StartPoint="0.752,0.932">
                                    <GradientStop Color="Black" Offset="1"/>
                                    <GradientStop Color="#FF3B4B53"/>
                                </LinearGradientBrush>
                            </Rectangle.Stroke>
                        </Rectangle>
                        <Path Stretch="Fill" Stroke="White" VerticalAlignment="Top" Height="15.967" Data="M15.5,13.793144 C15.5,14.735746 14.750933,15.499876 13.826912,15.499876 13.826912,15.499876 2.9487255,15.515584 2.1730882,15.499876 1.2490671,15.499876 0.5,14.735746 0.5,13.793144 0.5,13.793144 0.5,3.0182376 0.5,2.2538563 0.5,1.3112539 1.2490671,0.54712357 2.1730882,0.54712357 2.1730882,0.54712357 13.051275,0.53141579 13.826912,0.54712365 14.750933,0.54712365 15.5,1.3112539 15.5,2.2538564 z" RenderTransformOrigin="0.84375,0.84274320308268" Margin="4,-7,4,0">
                            <Path.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform ScaleX="1" ScaleY="-1"/>
                                    <SkewTransform AngleX="0" AngleY="0"/>
                                    <RotateTransform Angle="0"/>
                                    <TranslateTransform Y="0.13483891249322255"/>
                                </TransformGroup>
                            </Path.RenderTransform>
                        </Path>
                        <Path Fill="White" Stretch="Fill" Stroke="White" StrokeLineJoin="Round" Margin="6.714,11.738,-1.783,-6.691" Opacity="0.3" RenderTransformOrigin="0.484036964014829,0.123337561593774" Data="M14.865088,15.531371 L10.992853,19.063872 8.7908843,19.453371 4.9310876,15.705874 z M1.2564306,7.7700869 L18.115608,8.0603267 19.569078,10.166261 18.741349,11.612734 0.99792767,11.431197 0.5,9.4234268 z M10.821378,0.5 L14.681175,4.2474972 4.7471755,4.4220001 8.6194093,0.8894991 z">
                            <Path.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform ScaleX="-1" ScaleY="-1"/>
                                    <SkewTransform AngleX="0" AngleY="0"/>
                                    <RotateTransform Angle="-45.981"/>
                                    <TranslateTransform X="1.4175107740995694" Y="3.0439861826443586"/>
                                </TransformGroup>
                            </Path.RenderTransform>
                        </Path>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Stroke" TargetName="rectangle">
                                <Setter.Value>
                                    <LinearGradientBrush EndPoint="0.248,0.068" StartPoint="0.752,0.932">
                                        <GradientStop Color="Black" Offset="1"/>
                                        <GradientStop Color="#FF4B5F68"/>
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Fill" TargetName="rectangle" Value="#4C121A1E"/>
                            <Setter Property="Opacity" TargetName="rectangle" Value="1"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Fill" TargetName="rectangle" Value="#FF131718"/>
                            <Setter Property="Stroke" TargetName="rectangle">
                                <Setter.Value>
                                    <LinearGradientBrush EndPoint="0.248,0.068" StartPoint="0.752,0.932">
                                        <GradientStop Color="Black" Offset="1"/>
                                        <GradientStop Color="#FF576D78"/>
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Opacity" TargetName="rectangle" Value="1"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="OpenMissions" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid x:Name="open" SnapsToDevicePixels="True">
                        <Rectangle x:Name="rectangle" Fill="#FF121A1E" RadiusX="2" RadiusY="2" Opacity="0">
                            <Rectangle.Stroke>
                                <LinearGradientBrush EndPoint="0.248,0.068" StartPoint="0.752,0.932">
                                    <GradientStop Color="Black" Offset="1"/>
                                    <GradientStop Color="#FF3B4B53"/>
                                </LinearGradientBrush>
                            </Rectangle.Stroke>
                        </Rectangle>
                        <Path x:Name="path" Fill="White" Stretch="Fill" Stroke="White" StrokeEndLineCap="Round" StrokeLineJoin="Round" StrokeStartLineCap="Round" Margin="2.667,0,2.333,3.669" VerticalAlignment="Bottom" Height="9" Data="M0.5,1.7713285 L10.5,1.7713285 10.5,7.6880001 0.5,7.6880001 z M0.5,2.1026081 L0.5,0.32641573 3.5,0.32641573 4.46875,1.7874717"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True"/>
                        <Trigger Property="IsDefaulted" Value="True"/>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Opacity" TargetName="rectangle" Value="1"/>
                            <Setter Property="Fill" TargetName="rectangle" Value="#66121A1E"/>
                            <Setter Property="Stroke" TargetName="rectangle">
                                <Setter.Value>
                                    <LinearGradientBrush EndPoint="0.851,0.144" StartPoint="0.149,0.856">
                                        <GradientStop Color="Black" Offset="1"/>
                                        <GradientStop Color="#FF4A5D67"/>
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Opacity" TargetName="rectangle" Value="1"/>
                            <Setter Property="Stroke" TargetName="rectangle">
                                <Setter.Value>
                                    <LinearGradientBrush EndPoint="0.828,0.122" StartPoint="0.172,0.878">
                                        <GradientStop Color="Black" Offset="1"/>
                                        <GradientStop Color="#FF4F626C"/>
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False"/>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="save" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid x:Name="open" SnapsToDevicePixels="True">
                        <Rectangle x:Name="rectangle" Fill="#FF121A1E" RadiusX="2" RadiusY="2" Opacity="0">
                            <Rectangle.Stroke>
                                <LinearGradientBrush EndPoint="0.248,0.068" StartPoint="0.752,0.932">
                                    <GradientStop Color="Black" Offset="1"/>
                                    <GradientStop Color="#FF3B4B53"/>
                                </LinearGradientBrush>
                            </Rectangle.Stroke>
                        </Rectangle>
                        <Path Stretch="Fill" Stroke="White" StrokeEndLineCap="Round" StrokeLineJoin="Round" StrokeStartLineCap="Round" HorizontalAlignment="Center" Margin="0,3,0,0" VerticalAlignment="Top" Width="5" Height="4" Data="M0.45479168,0.61758334 C0.45479168,0.61758334 7.910457,0.55508333 7.910457,0.55508333 7.910457,0.55508333 7.942819,4.0736944 7.959,5.833 7.959,6.3852847 7.5112847,6.833 6.959,6.833 L1.5,6.833 C0.94771525,6.833 0.5,6.3852847 0.5,5.833 0.48493056,4.0945278 0.45479168,0.61758334 0.45479168,0.61758334 z"/>
                        <Rectangle Fill="White" Stroke="White" StrokeEndLineCap="Round" StrokeLineJoin="Round" StrokeStartLineCap="Round" HorizontalAlignment="Center" Margin="0,0,0,3" VerticalAlignment="Bottom" Width="6" Height="4"/>
                        <Path Stretch="Fill" Stroke="White" StrokeEndLineCap="Round" StrokeLineJoin="Round" StrokeStartLineCap="Round" HorizontalAlignment="Center" Margin="0" VerticalAlignment="Center" Width="11" Height="11" Data="M2.3546667,0.5 L10.376,0.5 10.376,10.376 0.5,10.376 0.5,2.2326667 z"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True"/>
                        <Trigger Property="IsDefaulted" Value="True"/>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Opacity" TargetName="rectangle" Value="1"/>
                            <Setter Property="Fill" TargetName="rectangle" Value="#66121A1E"/>
                            <Setter Property="Stroke" TargetName="rectangle">
                                <Setter.Value>
                                    <LinearGradientBrush EndPoint="0.851,0.144" StartPoint="0.149,0.856">
                                        <GradientStop Color="Black" Offset="1"/>
                                        <GradientStop Color="#FF4A5D67"/>
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Opacity" TargetName="rectangle" Value="1"/>
                            <Setter Property="Stroke" TargetName="rectangle">
                                <Setter.Value>
                                    <LinearGradientBrush EndPoint="0.828,0.122" StartPoint="0.172,0.878">
                                        <GradientStop Color="Black" Offset="1"/>
                                        <GradientStop Color="#FF4F626C"/>
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False"/>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ZoomToAllRadioButton" TargetType="{x:Type RadioButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Grid>
                        <Grid x:Name="zoomAll_Copy6" d:LayoutOverrides="Width, Height">
                            <Rectangle x:Name="rectangle" Fill="#FF121A1E" RadiusX="2" RadiusY="2" Opacity="0">
                                <Rectangle.Stroke>
                                    <LinearGradientBrush EndPoint="0.248,0.068" StartPoint="0.752,0.932">
                                        <GradientStop Color="Black" Offset="1"/>
                                        <GradientStop Color="#FF3B4B53"/>
                                    </LinearGradientBrush>
                                </Rectangle.Stroke>
                            </Rectangle>
                            <Path Stretch="Fill" Stroke="White" Margin="0,0,4.333,4.953" Data="M7.8125,3.0003261 L7.8125,5.6875 C7.8125,6.7920695 6.9170695,7.6875 5.8125,7.6875 L3.0309231,7.7427208" VerticalAlignment="Bottom" Height="5.047" HorizontalAlignment="Right" Width="5"/>
                            <Path Stretch="Fill" Stroke="White" HorizontalAlignment="Left" Margin="4.667,0,0,4.953" VerticalAlignment="Bottom" Width="5" Height="5.047" Data="M7.8125,3.0003261 L7.8125,5.6875 C7.8125,6.7920695 6.9170695,7.6875 5.8125,7.6875 L3.0309231,7.7427208" RenderTransformOrigin="0.5,0.5">
                                <Path.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform ScaleX="-1" ScaleY="1"/>
                                        <SkewTransform AngleX="0" AngleY="0"/>
                                        <RotateTransform Angle="0"/>
                                        <TranslateTransform/>
                                    </TransformGroup>
                                </Path.RenderTransform>
                            </Path>
                            <Path Stretch="Fill" Stroke="White" HorizontalAlignment="Right" Margin="0,4,4.333,0" VerticalAlignment="Top" Width="5" Height="5.047" Data="M7.8125,3.0003261 L7.8125,5.6875 C7.8125,6.7920695 6.9170695,7.6875 5.8125,7.6875 L3.0309231,7.7427208" RenderTransformOrigin="0.5,0.5">
                                <Path.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform ScaleX="1" ScaleY="-1"/>
                                        <SkewTransform AngleX="0" AngleY="0"/>
                                        <RotateTransform Angle="0"/>
                                        <TranslateTransform/>
                                    </TransformGroup>
                                </Path.RenderTransform>
                            </Path>
                            <Path Stretch="Fill" Stroke="White" HorizontalAlignment="Left" Margin="4.667,4,0,0" VerticalAlignment="Top" Width="5" Height="5.047" Data="M7.8125,3.0003261 L7.8125,5.6875 C7.8125,6.7920695 6.9170695,7.6875 5.8125,7.6875 L3.0309231,7.7427208" RenderTransformOrigin="0.5,0.5">
                                <Path.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform ScaleX="-1" ScaleY="-1"/>
                                        <SkewTransform AngleX="0" AngleY="0"/>
                                        <RotateTransform Angle="0"/>
                                        <TranslateTransform/>
                                    </TransformGroup>
                                </Path.RenderTransform>
                            </Path>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Opacity" TargetName="rectangle" Value="1"/>
                            <Setter Property="Fill" TargetName="rectangle" Value="#4C121A1E"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Opacity" TargetName="rectangle" Value="1"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ZoomOutRadioButton" TargetType="{x:Type RadioButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Grid>
                        <Grid x:Name="zoomAll_Copy6" d:LayoutOverrides="Width, Height">
                            <Rectangle x:Name="rectangle" Fill="#FF121A1E" RadiusX="2" RadiusY="2" Opacity="0">
                                <Rectangle.Stroke>
                                    <LinearGradientBrush EndPoint="0.248,0.068" StartPoint="0.752,0.932">
                                        <GradientStop Color="Black" Offset="1"/>
                                        <GradientStop Color="#FF3B4B53"/>
                                    </LinearGradientBrush>
                                </Rectangle.Stroke>
                            </Rectangle>
                            <Ellipse Stroke="White" HorizontalAlignment="Center" Width="16" Height="16" Margin="0" VerticalAlignment="Center"/>
                            <Path Stretch="Fill" Stroke="White" StrokeEndLineCap="Round" StrokeStartLineCap="Round" HorizontalAlignment="Center" Margin="0" VerticalAlignment="Center" Height="9" Data="M8,2.75 L8,11.0625" StrokeThickness="2" RenderTransformOrigin="0.5,0.5">
                                <Path.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform/>
                                        <SkewTransform/>
                                        <RotateTransform Angle="-90"/>
                                        <TranslateTransform/>
                                    </TransformGroup>
                                </Path.RenderTransform>
                            </Path>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Opacity" TargetName="rectangle" Value="1"/>
                            <Setter Property="Fill" TargetName="rectangle" Value="#4C121A1E"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Opacity" TargetName="rectangle" Value="1"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ZoomInRadioButton" TargetType="{x:Type RadioButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Grid>
                        <Grid x:Name="zoomAll_Copy6" d:LayoutOverrides="Width, Height">
                            <Rectangle x:Name="rectangle" Fill="#FF121A1E" RadiusX="2" RadiusY="2" Opacity="0">
                                <Rectangle.Stroke>
                                    <LinearGradientBrush EndPoint="0.248,0.068" StartPoint="0.752,0.932">
                                        <GradientStop Color="Black" Offset="1"/>
                                        <GradientStop Color="#FF3B4B53"/>
                                    </LinearGradientBrush>
                                </Rectangle.Stroke>
                            </Rectangle>
                            <Ellipse Stroke="White" StrokeEndLineCap="Round" StrokeLineJoin="Round" StrokeStartLineCap="Round" Margin="4.351,4.5,4.649,4.5"/>
                            <Path Stretch="Fill" Stroke="White" StrokeEndLineCap="Round" StrokeStartLineCap="Round" HorizontalAlignment="Center" Margin="0" VerticalAlignment="Center" Height="9" Data="M8,2.75 L8,11.0625" StrokeThickness="2" RenderTransformOrigin="0.5,0.5">
                                <Path.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform/>
                                        <SkewTransform/>
                                        <RotateTransform Angle="-90"/>
                                        <TranslateTransform/>
                                    </TransformGroup>
                                </Path.RenderTransform>
                            </Path>
                            <Path Stretch="Fill" Stroke="White" StrokeEndLineCap="Round" StrokeStartLineCap="Round" HorizontalAlignment="Center" Margin="0" VerticalAlignment="Center" Height="9" Data="M8,2.75 L8,11.0625" StrokeThickness="2" RenderTransformOrigin="0.5,0.5">
                                <Path.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform/>
                                        <SkewTransform/>
                                        <RotateTransform Angle="-180"/>
                                        <TranslateTransform/>
                                    </TransformGroup>
                                </Path.RenderTransform>
                            </Path>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Opacity" TargetName="rectangle" Value="1"/>
                            <Setter Property="Fill" TargetName="rectangle" Value="#4C121A1E"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Opacity" TargetName="rectangle" Value="1"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="PanRadioButton" TargetType="{x:Type RadioButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Grid>
                        <Grid x:Name="zoomAll_Copy6" d:LayoutOverrides="Width, Height">
                            <Rectangle x:Name="rectangle" Fill="#FF121A1E" RadiusX="2" RadiusY="2" Opacity="0">
                                <Rectangle.Stroke>
                                    <LinearGradientBrush EndPoint="0.248,0.068" StartPoint="0.752,0.932">
                                        <GradientStop Color="Black" Offset="1"/>
                                        <GradientStop Color="#FF3B4B53"/>
                                    </LinearGradientBrush>
                                </Rectangle.Stroke>
                            </Rectangle>
                            <Path Fill="White" Stretch="Fill" StrokeEndLineCap="Round" StrokeLineJoin="Round" StrokeStartLineCap="Round" StrokeThickness="0.5" Margin="5.723,4.918,5.212,4.511" Data="M873.91441,743.11002 C872.73045,740.08029 867.375,731.125 867,719.625 866.625,708.125 862.25,698 863.25,695.625 864.25,693.25 869.99994,693.25 871.49997,697.625 873,702 875.09848,714.19949 876.01944,715.71445 876.9404,717.22942 882.8609,717.48191 885.22908,706.87717 887.59727,696.27243 891.14952,677.58788 894.57023,674.05297 897.99095,670.51806 900.88541,675.94668 899.70132,678.97661 898.51723,682.00653 897.33353,685.03609&#xa;897.20196,686.17232 897.07039,687.30855 895.49159,702.20578 895.49159,703.46825 895.49159,704.73073 896.41256,707.12944 897.07039,706.2457 897.72823,705.36197 903.9119,686.92981 905.35914,684.2786 906.80638,681.6274 909.83242,674.30504 912.06907,673.92629 914.30571,673.54755 917.46336,675.06252 916.27925,677.96622 915.09514,680.86992 911.2794,692.98969 910.49,695.26215 909.7006,697.53461 906.9377,707.76067 906.80614,708.64441 906.67457,709.52814&#xa;907.73016,710.72469 909.40253,708.32442 911.07489,705.92416 912.05054,705.06026 913.50414,702.8345 915.6422,699.56068 917.01819,695.78525 917.33147,694.88341 917.85773,693.36844 920.48908,683.39487 923.51512,683.39487 926.54115,683.39487 927.199,686.17232 926.93587,687.4348 926.67274,688.69727 924.69932,694.63091 923.64679,697.28212 922.59425,699.93332 921.14702,704.98323 920.09448,706.75069 919.04195,708.51816 913.91084,717.22925 914.0424,718.11299&#xa;914.17397,718.99672 915.88434,721.52167 918.51568,718.87047 919.87533,717.50056 923.66369,713.07569 926.0225,708.22547 928.28706,703.56902 930.63624,699.57397 932.70489,699.32157 934.66787,699.08208 935.33622,702.35151 934.67839,703.74024 934.41325,704.29995 929.15255,714.83235 928.19863,716.52634 925.34811,721.58835 921.76688,726.71802 920.88417,727.9603 920.88417,727.9603 911.93758,741.09006 911.01661,742.47878 910.09563,743.86751 903.91196,754.34607&#xa;895.6232,753.08359 887.33445,751.82111 887.33445,751.31637 887.33445,751.31637 887.33445,751.31637 884.04526,751.44262 881.54547,750.05389 879.04569,748.66516 875.09836,746.13976 873.91441,743.11002 z" RenderTransformOrigin="0.5,0.5" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" d:LayoutOverrides="Height">
                                <Path.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform/>
                                        <SkewTransform/>
                                        <RotateTransform Angle="-37.106"/>
                                        <TranslateTransform X="0.10358439111440765" Y="-0.025367952536631933"/>
                                    </TransformGroup>
                                </Path.RenderTransform>
                            </Path>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Opacity" TargetName="rectangle" Value="1"/>
                            <Setter Property="Fill" TargetName="rectangle" Value="#4C121A1E"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Opacity" TargetName="rectangle" Value="1"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="RulerRadioButton" TargetType="{x:Type RadioButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Grid>
                        <Grid x:Name="zoomAll_Copy6" d:LayoutOverrides="Width, Height">
                            <Rectangle x:Name="rectangle" Fill="#FF121A1E" RadiusX="2" RadiusY="2" Opacity="0">
                                <Rectangle.Stroke>
                                    <LinearGradientBrush EndPoint="0.248,0.068" StartPoint="0.752,0.932">
                                        <GradientStop Color="Black" Offset="1"/>
                                        <GradientStop Color="#FF3B4B53"/>
                                    </LinearGradientBrush>
                                </Rectangle.Stroke>
                            </Rectangle>
                            <Path Fill="White" Stretch="Fill" StrokeEndLineCap="Round" StrokeLineJoin="Round" StrokeStartLineCap="Round" StrokeThickness="0.5" RenderTransformOrigin="0.996,-0.016" Data="M14.952,3.6770001 L14.952,6.3119999 16.752001,6.3119999 16.752001,3.6770001 z M12.593,3.6770001 L12.593,6.3119999 14.393,6.3119999 14.393,3.6770001 z M10.217,3.6770001 L10.217,6.3119999 12.017,6.3119999 12.017,3.6770001 z M5.4190001,3.6770001 L5.4190001,6.3119999 7.2189999,6.3119999 7.2189999,3.6770001 z M3.0599997,3.6770001 L3.0599997,6.3119999 4.8600001,6.3119999 4.8600001,3.6770001 z M0.69299996,3.6770001 L0.69299996,6.3119999 2.493,6.3119999 2.493,3.6770001 z M17.333,2.1250001 L17.333,6.3119999 19.132999,6.3119999 19.132999,2.1250001 z M7.7449999,2.1250001 L7.7449999,6.3119999 9.5450001,6.3119999 9.5450001,2.1250001 z M0,0 L19.723,0 19.723,6.7500001 0,6.7500001 z" Margin="3.448,9.446,4.551,10.554" Width="17" Height="5">
                                <Path.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform/>
                                        <SkewTransform/>
                                        <RotateTransform Angle="-46.788"/>
                                        <TranslateTransform X="-4.006" Y="-4.885"/>
                                    </TransformGroup>
                                </Path.RenderTransform>
                            </Path>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Opacity" TargetName="rectangle" Value="1"/>
                            <Setter Property="Fill" TargetName="rectangle" Value="#4C121A1E"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Opacity" TargetName="rectangle" Value="1"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="CircleRadioButton" TargetType="{x:Type RadioButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Grid Height="Auto">
                        <Grid x:Name="zoomAll_Copy6" d:LayoutOverrides="Width, Height">
                            <Rectangle x:Name="rectangle" Fill="#FF121A1E" RadiusX="2" RadiusY="2" Opacity="0">
                                <Rectangle.Stroke>
                                    <LinearGradientBrush EndPoint="0.248,0.068" StartPoint="0.752,0.932">
                                        <GradientStop Color="Black" Offset="1"/>
                                        <GradientStop Color="#FF3B4B53"/>
                                    </LinearGradientBrush>
                                </Rectangle.Stroke>
                            </Rectangle>
                            <Ellipse Stroke="White" StrokeEndLineCap="Round" StrokeLineJoin="Round" StrokeStartLineCap="Round" Margin="4.956,5.105,5.254,5.104"/>
                            <Ellipse StrokeEndLineCap="Round" StrokeLineJoin="Round" StrokeStartLineCap="Round" StrokeThickness="0.5" Margin="11.351,11.5,11.649,11.5" Fill="White" Width="2" Height="2" HorizontalAlignment="Stretch"/>
                            <Path Stretch="Fill" Stroke="White" StrokeEndLineCap="Round" StrokeLineJoin="Round" StrokeStartLineCap="Round" Margin="12.354,6.625,7.459,0" VerticalAlignment="Top" Height="5.792" Data="M8.0033333,7.9166667 L13.385103,1.8472989"/>
                            <Ellipse StrokeEndLineCap="Round" StrokeLineJoin="Round" StrokeStartLineCap="Round" StrokeThickness="0.5" Margin="0,6,6.854,0" Fill="White" Width="2.708" Height="2.708" HorizontalAlignment="Right" VerticalAlignment="Top"/>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Opacity" TargetName="rectangle" Value="1"/>
                            <Setter Property="Fill" TargetName="rectangle" Value="#4C121A1E"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Opacity" TargetName="rectangle" Value="1"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="RectRadioButton" TargetType="{x:Type RadioButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Grid>
                        <Grid x:Name="zoomAll_Copy6" d:LayoutOverrides="Width, Height">
                            <Rectangle x:Name="rectangle" Fill="#FF121A1E" RadiusX="2" RadiusY="2" Opacity="0">
                                <Rectangle.Stroke>
                                    <LinearGradientBrush EndPoint="0.248,0.068" StartPoint="0.752,0.932">
                                        <GradientStop Color="Black" Offset="1"/>
                                        <GradientStop Color="#FF3B4B53"/>
                                    </LinearGradientBrush>
                                </Rectangle.Stroke>
                            </Rectangle>
                            <Rectangle Stroke="White" Margin="5,6,6,6"/>
                            <Ellipse StrokeEndLineCap="Round" StrokeLineJoin="Round" StrokeStartLineCap="Round" StrokeThickness="0.5" Margin="4.166,5.139,0,0" Fill="White" Width="2.666" Height="2.666" HorizontalAlignment="Left" VerticalAlignment="Top"/>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Opacity" TargetName="rectangle" Value="1"/>
                            <Setter Property="Fill" TargetName="rectangle" Value="#4C121A1E"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Opacity" TargetName="rectangle" Value="1"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="HotAreaRadioButton" TargetType="{x:Type RadioButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Grid>
                        <Grid x:Name="zoomAll_Copy6" d:LayoutOverrides="Width, Height">
                            <Rectangle x:Name="rectangle" Fill="#FF121A1E" RadiusX="2" RadiusY="2" Opacity="0">
                                <Rectangle.Stroke>
                                    <LinearGradientBrush EndPoint="0.248,0.068" StartPoint="0.752,0.932">
                                        <GradientStop Color="Black" Offset="1"/>
                                        <GradientStop Color="#FF3B4B53"/>
                                    </LinearGradientBrush>
                                </Rectangle.Stroke>
                            </Rectangle>
                            <Path Stretch="Fill" Stroke="White" StrokeEndLineCap="Round" StrokeStartLineCap="Round" Margin="4.375,4.936,4.625,5.127" Data="M14.461667,6.5625 L8.0238337,0.813 1.3366726,5.8129348 3.8363382,13.00106 10.586335,11.62594 z" Fill="{x:Null}" StrokeLineJoin="Round"/>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Opacity" TargetName="rectangle" Value="1"/>
                            <Setter Property="Fill" TargetName="rectangle" Value="#4C121A1E"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Opacity" TargetName="rectangle" Value="1"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="IntrestAreaRadioButton" TargetType="{x:Type RadioButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Grid>
                        <Grid x:Name="poli_Copy5" d:LayoutOverrides="Width, Height">
                            <Rectangle x:Name="rectangle" Fill="#4C121A1E" RadiusX="2" RadiusY="2" Opacity="0">
                                <Rectangle.Stroke>
                                    <LinearGradientBrush EndPoint="0.248,0.068" StartPoint="0.752,0.932">
                                        <GradientStop Color="Black" Offset="1"/>
                                        <GradientStop Color="#FF3B4B53"/>
                                    </LinearGradientBrush>
                                </Rectangle.Stroke>
                            </Rectangle>
                            <Path Stretch="Fill" Stroke="White" StrokeEndLineCap="Round" StrokeStartLineCap="Round" Margin="4.541,4.772,4.626,5.067" Data="M14.461667,6.5625 L8.0238337,0.813 1.3366726,5.8129348 3.8363382,13.00106 10.586335,11.62594 z" StrokeLineJoin="Round" StrokeDashArray="2 1"/>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Opacity" TargetName="rectangle" Value="1"/>
                            <Setter Property="Fill" TargetName="rectangle" Value="#4C121A1E"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Opacity" TargetName="rectangle" Value="1"/>
                            <Setter Property="Fill" TargetName="rectangle" Value="#FF121A1E"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="PolilineRadioButton" TargetType="{x:Type RadioButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Grid>
                        <Grid x:Name="zoomAll_Copy6" d:LayoutOverrides="Width, Height">
                            <Rectangle x:Name="rectangle" Fill="#FF121A1E" RadiusX="2" RadiusY="2" Opacity="0">
                                <Rectangle.Stroke>
                                    <LinearGradientBrush EndPoint="0.248,0.068" StartPoint="0.752,0.932">
                                        <GradientStop Color="Black" Offset="1"/>
                                        <GradientStop Color="#FF3B4B53"/>
                                    </LinearGradientBrush>
                                </Rectangle.Stroke>
                            </Rectangle>
                            <Path Stretch="Fill" Stroke="White" StrokeEndLineCap="Round" StrokeStartLineCap="Round" Margin="5.685,5.438,4.788,6" Data="M14.461667,6.5625 L8.0238337,0.813 1.3366726,5.8129348 3.8363382,13.00106 10.586335,11.62594"/>
                            <Ellipse StrokeEndLineCap="Round" StrokeLineJoin="Round" StrokeStartLineCap="Round" StrokeThickness="0.5" Margin="0,0,7.761,6.785" Fill="White" Height="3" VerticalAlignment="Bottom" HorizontalAlignment="Right" Width="3"/>
                            <Ellipse StrokeEndLineCap="Round" StrokeLineJoin="Round" StrokeStartLineCap="Round" StrokeThickness="0.5" Margin="7.586,0,0,5.141" Fill="White" Height="3" VerticalAlignment="Bottom" HorizontalAlignment="Left" Width="3"/>
                            <Ellipse StrokeEndLineCap="Round" StrokeLineJoin="Round" StrokeStartLineCap="Round" StrokeThickness="0.5" Margin="4.68,9.742,0,0" Fill="White" Height="3" VerticalAlignment="Top" HorizontalAlignment="Left" Width="3.002"/>
                            <Ellipse StrokeEndLineCap="Round" StrokeLineJoin="Round" StrokeStartLineCap="Round" StrokeThickness="0.5" Margin="11.684,4.625,10.316,0" Fill="White" Height="3" VerticalAlignment="Top"/>
                            <Ellipse StrokeEndLineCap="Round" StrokeLineJoin="Round" StrokeStartLineCap="Round" StrokeThickness="0.5" Margin="0,9.912,4.388,0" Fill="White" Height="3" VerticalAlignment="Top" HorizontalAlignment="Right" Width="3"/>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Opacity" TargetName="rectangle" Value="1"/>
                            <Setter Property="Fill" TargetName="rectangle" Value="#4C121A1E"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Opacity" TargetName="rectangle" Value="1"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="RadioButtonPoint" TargetType="{x:Type RadioButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Grid>
                        <Grid x:Name="zoomAll_Copy6" d:LayoutOverrides="Width, Height">
                            <Rectangle x:Name="rectangle" Fill="#FF121A1E" RadiusX="2" RadiusY="2" Opacity="0">
                                <Rectangle.Stroke>
                                    <LinearGradientBrush EndPoint="0.248,0.068" StartPoint="0.752,0.932">
                                        <GradientStop Color="Black" Offset="1"/>
                                        <GradientStop Color="#FF3B4B53"/>
                                    </LinearGradientBrush>
                                </Rectangle.Stroke>
                            </Rectangle>
                            <Ellipse Stroke="White" StrokeEndLineCap="Round" StrokeLineJoin="Round" StrokeStartLineCap="Round" Margin="6.601,6.75,6.899,6.75"/>
                            <Path Stretch="Fill" Stroke="White" StrokeEndLineCap="Round" StrokeLineJoin="Round" StrokeStartLineCap="Round" Margin="11.875,3.667,12.125,0" VerticalAlignment="Top" Height="5.959" Data="M12.25,2.75 L12.25,9.5428169"/>
                            <Path Stretch="Fill" Stroke="White" StrokeEndLineCap="Round" StrokeLineJoin="Round" StrokeStartLineCap="Round" Margin="11.875,0,12.125,3.583" VerticalAlignment="Bottom" Height="5.959" Data="M12.25,2.75 L12.25,9.5428169"/>
                            <Path Stretch="Fill" Stroke="White" StrokeEndLineCap="Round" StrokeLineJoin="Round" StrokeStartLineCap="Round" Margin="11.875,3.667,12.125,0" VerticalAlignment="Top" Height="5.959" Data="M12.25,2.75 L12.25,9.5428169" RenderTransformOrigin="0.5,0.5">
                                <Path.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform/>
                                        <SkewTransform/>
                                        <RotateTransform Angle="-90"/>
                                        <TranslateTransform X="-5.895" Y="5.895"/>
                                    </TransformGroup>
                                </Path.RenderTransform>
                            </Path>
                            <Path Stretch="Fill" Stroke="White" StrokeEndLineCap="Round" StrokeLineJoin="Round" StrokeStartLineCap="Round" Margin="11.875,0,12.125,3.583" VerticalAlignment="Bottom" Height="5.959" Data="M12.25,2.75 L12.25,9.5428169" RenderTransformOrigin="0.5,0.5">
                                <Path.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform/>
                                        <SkewTransform/>
                                        <RotateTransform Angle="-90"/>
                                        <TranslateTransform X="5.895" Y="-5.895"/>
                                    </TransformGroup>
                                </Path.RenderTransform>
                            </Path>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Opacity" TargetName="rectangle" Value="1"/>
                            <Setter Property="Fill" TargetName="rectangle" Value="#4C121A1E"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Opacity" TargetName="rectangle" Value="1"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Color x:Key="enableGray">#FFA1A1A1</Color>
    <Color x:Key="blue01">#FF516D7A</Color>
    <Color x:Key="blueBackground">#FF374A53</Color>
    <Color x:Key="darkBlueish">#FF374A53</Color>
    <Color x:Key="darkBG">#FF374A53</Color>
    <LinearGradientBrush x:Key="gdBorder" EndPoint="0.5,1" StartPoint="0.5,0">
        <GradientStop Color="#FF4F6772" Offset="1"/>
        <GradientStop Color="#FF1B252A"/>
    </LinearGradientBrush>
    <Color x:Key="blueTopLevel">#FF00A5FF</Color>
    <Color x:Key="Turquoise">#FF07E1E9</Color>
    <Color x:Key="yellow">#FFE4F000</Color>
    <Color x:Key="Magenta">#FFE735FF</Color>
    <Color x:Key="Orange">#FFFF8A00</Color>
    <Color x:Key="blue">#FF254BB1</Color>
    <Color x:Key="purple">#FF5E26AB</Color>
    <Color x:Key="Green">#FF0A5700</Color>
    
    <Style x:Key="GreenColor" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}" >
                    <Grid x:Name="grid" Background="{x:Null}">
                        <Rectangle x:Name="rectangle" Stroke="{x:Null}" Margin="1">
                            <Rectangle.Fill>
                                <SolidColorBrush Color="{DynamicResource Green}"/>
                            </Rectangle.Fill>
                        </Rectangle>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True"/>
                        <Trigger Property="IsDefaulted" Value="True"/>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Margin" TargetName="rectangle" Value="0"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True"/>
                        <Trigger Property="IsEnabled" Value="False"/>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="PurpleColor" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid x:Name="grid" Margin="1">
                        <Grid.Background>
                            <SolidColorBrush Color="{DynamicResource purple}"/>
                        </Grid.Background>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True"/>
                        <Trigger Property="IsDefaulted" Value="True"/>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Margin" TargetName="grid" Value="0"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True"/>
                        <Trigger Property="IsEnabled" Value="False"/>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="BlueColor" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid x:Name="grid" Margin="1">
                        <Grid.Background>
                            <SolidColorBrush Color="{DynamicResource blue}"/>
                        </Grid.Background>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True"/>
                        <Trigger Property="IsDefaulted" Value="True"/>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Margin" TargetName="grid" Value="0"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True"/>
                        <Trigger Property="IsEnabled" Value="False"/>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="MagentaColor" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid x:Name="grid" Margin="1">
                        <Grid.Background>
                            <SolidColorBrush Color="{DynamicResource Magenta}"/>
                        </Grid.Background>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True"/>
                        <Trigger Property="IsDefaulted" Value="True"/>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Margin" TargetName="grid" Value="0"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True"/>
                        <Trigger Property="IsEnabled" Value="False"/>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="OrangeColor" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid x:Name="grid" Margin="1">
                        <Grid.Background>
                            <SolidColorBrush Color="{DynamicResource Orange}"/>
                        </Grid.Background>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True"/>
                        <Trigger Property="IsDefaulted" Value="True"/>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Margin" TargetName="grid" Value="0"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True"/>
                        <Trigger Property="IsEnabled" Value="False"/>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="YellowColor" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid x:Name="grid" Margin="1">
                        <Grid.Background>
                            <SolidColorBrush Color="{DynamicResource yellow}"/>
                        </Grid.Background>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True"/>
                        <Trigger Property="IsDefaulted" Value="True"/>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Margin" TargetName="grid" Value="0"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True"/>
                        <Trigger Property="IsEnabled" Value="False"/>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="KomunaMenuItemColorSelector" TargetType="{x:Type MenuItem}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type MenuItem}">
                    <WrapPanel>
                        <Button Margin="0,0,1,0" Style="{DynamicResource OrangeColor}" Width="10" Height="10" Content="Button"/>
                        <Button Margin="0,0,1,0" Style="{DynamicResource MagentaColor}" Width="10" Height="10" Content="Button"/>
                        <Button Margin="0,0,1,0" Style="{DynamicResource BlueColor}" Width="10" Height="10" Content="Button"/>
                        <Button Margin="0" Style="{DynamicResource PurpleColor}" Width="10" Height="10" Content="Button"/>
                        <Button Margin="1,0,0,0" Style="{DynamicResource GreenColor}" Width="10" Height="10" Content="Button"/>
                    </WrapPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="MyFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Control}">
                    <Grid Margin="3 2">
                        <Rectangle Name="r1" StrokeThickness="1" Stroke="Black" StrokeDashArray="2 2"/>
                        <Border Name="border" Width="{TemplateBinding ActualWidth}" Height="{TemplateBinding ActualHeight}"  CornerRadius="10" BorderThickness="2" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ShadowStyle">
        <Setter Property="Control.Foreground" Value="LightGray" />
    </Style>

    <Style x:Key="BlueButton" TargetType="Button">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Margin" Value="2"/>
        <Setter Property="FontFamily" Value="Verdana"/>
        <Setter Property="FontSize" Value="11px"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="FocusVisualStyle" Value="{StaticResource MyFocusVisual}" />
        <Setter Property="Background" >
            <Setter.Value>
                <LinearGradientBrush MappingMode="RelativeToBoundingBox" EndPoint="0.5,1" StartPoint="0.5,0">
                    <GradientStop Color="#FFF3F3F3"/>
                    <GradientStop Color="#FFD4D4D4" Offset="0.466"/>
                    <GradientStop Color="#FF8394C3" Offset="1"/>
                    <GradientStop Color="#FFE2E3E6"/>
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Name="border" 
				BorderThickness="1"
				Padding="4,2" 
				BorderBrush="DarkGray" 
				CornerRadius="10" 
				Background="{TemplateBinding Background}">
                        <Grid >
                            <ContentPresenter HorizontalAlignment="Center" 
	                           VerticalAlignment="Center" Name="contentShadow" 
					Style="{StaticResource ShadowStyle}">
                                <ContentPresenter.RenderTransform>
                                    <TranslateTransform X="1.0" Y="1.0" />
                                </ContentPresenter.RenderTransform>
                            </ContentPresenter>
                            <ContentPresenter HorizontalAlignment="Center" 
                            VerticalAlignment="Center" Name="content"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="BorderBrush" Value="#FF4788c8" />
                            <Setter Property="Foreground" Value="#FF4788c8" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" >
                                <Setter.Value>
                                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" >
                                        <GradientStop Color="#F00000E6" Offset="0.0"/>
                                        <GradientStop Color="#F0E2E3E6" Offset="0.5"/>
                                        <GradientStop Color="#F00000E6" Offset="1"/>
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="content" Property="RenderTransform" >
                                <Setter.Value>
                                    <TranslateTransform Y="1.0" />
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsDefaulted" Value="True">
                            <Setter TargetName="border" Property="BorderBrush" Value="#FF282828" />
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter TargetName="border" Property="BorderBrush" Value="#FF282828" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="border" Property="Opacity" Value="0.7" />
                            <Setter Property="Foreground" Value="Gray" />
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>